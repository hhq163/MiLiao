// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Buddy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.Buddy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace Buddy {

void protobuf_ShutdownFile_IM_2eBuddy_2eproto() {
  delete IMRecentContactSessionReq::default_instance_;
  delete IMRecentContactSessionRsp::default_instance_;
  delete IMUserStatNotify::default_instance_;
  delete IMUsersInfoReq::default_instance_;
  delete IMUsersInfoRsp::default_instance_;
  delete IMRemoveSessionReq::default_instance_;
  delete IMRemoveSessionRsp::default_instance_;
  delete IMAllUserReq::default_instance_;
  delete IMAllUserRsp::default_instance_;
  delete IMUsersStatReq::default_instance_;
  delete IMUsersStatRsp::default_instance_;
  delete IMChangeAvatarReq::default_instance_;
  delete IMChangeAvatarRsp::default_instance_;
  delete IMPCLoginStatusNotify::default_instance_;
  delete IMRemoveSessionNotify::default_instance_;
  delete IMDepartmentReq::default_instance_;
  delete IMDepartmentRsp::default_instance_;
  delete IMAvatarChangedNotify::default_instance_;
  delete IMChangeSignInfoReq::default_instance_;
  delete IMChangeSignInfoRsp::default_instance_;
  delete IMSignInfoChangedNotify::default_instance_;
  delete IMUserSearchReq::default_instance_;
  delete IMUserSearchRsp::default_instance_;
  delete IMUserAddFriendReq::default_instance_;
  delete IMUserAddFriendRsp::default_instance_;
  delete IMUserRemFriendReq::default_instance_;
  delete IMUserRemFriendRsp::default_instance_;
  delete IMUserInfoChangeReq::default_instance_;
  delete IMUserInfoChangeRsp::default_instance_;
  delete IMUserAddFriendToUserRsp::default_instance_;
  delete IMUserAddFriendTargetReq::default_instance_;
  delete IMUserAddFriendTargetRsp::default_instance_;
  delete IMUserAddFriendToSelfRsp::default_instance_;
  delete IMSendDelMsgToTargetRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_IM_2eBuddy_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_IM_2eBuddy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::IM::BaseDefine::protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  IMRecentContactSessionReq::default_instance_ = new IMRecentContactSessionReq();
  IMRecentContactSessionRsp::default_instance_ = new IMRecentContactSessionRsp();
  IMUserStatNotify::default_instance_ = new IMUserStatNotify();
  IMUsersInfoReq::default_instance_ = new IMUsersInfoReq();
  IMUsersInfoRsp::default_instance_ = new IMUsersInfoRsp();
  IMRemoveSessionReq::default_instance_ = new IMRemoveSessionReq();
  IMRemoveSessionRsp::default_instance_ = new IMRemoveSessionRsp();
  IMAllUserReq::default_instance_ = new IMAllUserReq();
  IMAllUserRsp::default_instance_ = new IMAllUserRsp();
  IMUsersStatReq::default_instance_ = new IMUsersStatReq();
  IMUsersStatRsp::default_instance_ = new IMUsersStatRsp();
  IMChangeAvatarReq::default_instance_ = new IMChangeAvatarReq();
  IMChangeAvatarRsp::default_instance_ = new IMChangeAvatarRsp();
  IMPCLoginStatusNotify::default_instance_ = new IMPCLoginStatusNotify();
  IMRemoveSessionNotify::default_instance_ = new IMRemoveSessionNotify();
  IMDepartmentReq::default_instance_ = new IMDepartmentReq();
  IMDepartmentRsp::default_instance_ = new IMDepartmentRsp();
  IMAvatarChangedNotify::default_instance_ = new IMAvatarChangedNotify();
  IMChangeSignInfoReq::default_instance_ = new IMChangeSignInfoReq();
  IMChangeSignInfoRsp::default_instance_ = new IMChangeSignInfoRsp();
  IMSignInfoChangedNotify::default_instance_ = new IMSignInfoChangedNotify();
  IMUserSearchReq::default_instance_ = new IMUserSearchReq();
  IMUserSearchRsp::default_instance_ = new IMUserSearchRsp();
  IMUserAddFriendReq::default_instance_ = new IMUserAddFriendReq();
  IMUserAddFriendRsp::default_instance_ = new IMUserAddFriendRsp();
  IMUserRemFriendReq::default_instance_ = new IMUserRemFriendReq();
  IMUserRemFriendRsp::default_instance_ = new IMUserRemFriendRsp();
  IMUserInfoChangeReq::default_instance_ = new IMUserInfoChangeReq();
  IMUserInfoChangeRsp::default_instance_ = new IMUserInfoChangeRsp();
  IMUserAddFriendToUserRsp::default_instance_ = new IMUserAddFriendToUserRsp();
  IMUserAddFriendTargetReq::default_instance_ = new IMUserAddFriendTargetReq();
  IMUserAddFriendTargetRsp::default_instance_ = new IMUserAddFriendTargetRsp();
  IMUserAddFriendToSelfRsp::default_instance_ = new IMUserAddFriendToSelfRsp();
  IMSendDelMsgToTargetRsp::default_instance_ = new IMSendDelMsgToTargetRsp();
  IMRecentContactSessionReq::default_instance_->InitAsDefaultInstance();
  IMRecentContactSessionRsp::default_instance_->InitAsDefaultInstance();
  IMUserStatNotify::default_instance_->InitAsDefaultInstance();
  IMUsersInfoReq::default_instance_->InitAsDefaultInstance();
  IMUsersInfoRsp::default_instance_->InitAsDefaultInstance();
  IMRemoveSessionReq::default_instance_->InitAsDefaultInstance();
  IMRemoveSessionRsp::default_instance_->InitAsDefaultInstance();
  IMAllUserReq::default_instance_->InitAsDefaultInstance();
  IMAllUserRsp::default_instance_->InitAsDefaultInstance();
  IMUsersStatReq::default_instance_->InitAsDefaultInstance();
  IMUsersStatRsp::default_instance_->InitAsDefaultInstance();
  IMChangeAvatarReq::default_instance_->InitAsDefaultInstance();
  IMChangeAvatarRsp::default_instance_->InitAsDefaultInstance();
  IMPCLoginStatusNotify::default_instance_->InitAsDefaultInstance();
  IMRemoveSessionNotify::default_instance_->InitAsDefaultInstance();
  IMDepartmentReq::default_instance_->InitAsDefaultInstance();
  IMDepartmentRsp::default_instance_->InitAsDefaultInstance();
  IMAvatarChangedNotify::default_instance_->InitAsDefaultInstance();
  IMChangeSignInfoReq::default_instance_->InitAsDefaultInstance();
  IMChangeSignInfoRsp::default_instance_->InitAsDefaultInstance();
  IMSignInfoChangedNotify::default_instance_->InitAsDefaultInstance();
  IMUserSearchReq::default_instance_->InitAsDefaultInstance();
  IMUserSearchRsp::default_instance_->InitAsDefaultInstance();
  IMUserAddFriendReq::default_instance_->InitAsDefaultInstance();
  IMUserAddFriendRsp::default_instance_->InitAsDefaultInstance();
  IMUserRemFriendReq::default_instance_->InitAsDefaultInstance();
  IMUserRemFriendRsp::default_instance_->InitAsDefaultInstance();
  IMUserInfoChangeReq::default_instance_->InitAsDefaultInstance();
  IMUserInfoChangeRsp::default_instance_->InitAsDefaultInstance();
  IMUserAddFriendToUserRsp::default_instance_->InitAsDefaultInstance();
  IMUserAddFriendTargetReq::default_instance_->InitAsDefaultInstance();
  IMUserAddFriendTargetRsp::default_instance_->InitAsDefaultInstance();
  IMUserAddFriendToSelfRsp::default_instance_->InitAsDefaultInstance();
  IMSendDelMsgToTargetRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IM_2eBuddy_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_IM_2eBuddy_2eproto_once_);
void protobuf_AddDesc_IM_2eBuddy_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_IM_2eBuddy_2eproto_once_,
                 &protobuf_AddDesc_IM_2eBuddy_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IM_2eBuddy_2eproto {
  StaticDescriptorInitializer_IM_2eBuddy_2eproto() {
    protobuf_AddDesc_IM_2eBuddy_2eproto();
  }
} static_descriptor_initializer_IM_2eBuddy_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int IMRecentContactSessionReq::kUserIdFieldNumber;
const int IMRecentContactSessionReq::kLatestUpdateTimeFieldNumber;
const int IMRecentContactSessionReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMRecentContactSessionReq::IMRecentContactSessionReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMRecentContactSessionReq)
}

void IMRecentContactSessionReq::InitAsDefaultInstance() {
}

IMRecentContactSessionReq::IMRecentContactSessionReq(const IMRecentContactSessionReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMRecentContactSessionReq)
}

void IMRecentContactSessionReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  latest_update_time_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMRecentContactSessionReq::~IMRecentContactSessionReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMRecentContactSessionReq)
  SharedDtor();
}

void IMRecentContactSessionReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMRecentContactSessionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMRecentContactSessionReq& IMRecentContactSessionReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMRecentContactSessionReq* IMRecentContactSessionReq::default_instance_ = NULL;

IMRecentContactSessionReq* IMRecentContactSessionReq::New() const {
  return new IMRecentContactSessionReq;
}

void IMRecentContactSessionReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMRecentContactSessionReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, latest_update_time_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMRecentContactSessionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMRecentContactSessionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_latest_update_time;
        break;
      }

      // required uint32 latest_update_time = 2;
      case 2: {
        if (tag == 16) {
         parse_latest_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_update_time_)));
          set_has_latest_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMRecentContactSessionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMRecentContactSessionReq)
  return false;
#undef DO_
}

void IMRecentContactSessionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMRecentContactSessionReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 latest_update_time = 2;
  if (has_latest_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->latest_update_time(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMRecentContactSessionReq)
}

int IMRecentContactSessionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 latest_update_time = 2;
    if (has_latest_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->latest_update_time());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMRecentContactSessionReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMRecentContactSessionReq*>(&from));
}

void IMRecentContactSessionReq::MergeFrom(const IMRecentContactSessionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_latest_update_time()) {
      set_latest_update_time(from.latest_update_time());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMRecentContactSessionReq::CopyFrom(const IMRecentContactSessionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMRecentContactSessionReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMRecentContactSessionReq::Swap(IMRecentContactSessionReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(latest_update_time_, other->latest_update_time_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMRecentContactSessionReq::GetTypeName() const {
  return "IM.Buddy.IMRecentContactSessionReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMRecentContactSessionRsp::kUserIdFieldNumber;
const int IMRecentContactSessionRsp::kContactSessionListFieldNumber;
const int IMRecentContactSessionRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMRecentContactSessionRsp::IMRecentContactSessionRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMRecentContactSessionRsp)
}

void IMRecentContactSessionRsp::InitAsDefaultInstance() {
}

IMRecentContactSessionRsp::IMRecentContactSessionRsp(const IMRecentContactSessionRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMRecentContactSessionRsp)
}

void IMRecentContactSessionRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMRecentContactSessionRsp::~IMRecentContactSessionRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMRecentContactSessionRsp)
  SharedDtor();
}

void IMRecentContactSessionRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMRecentContactSessionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMRecentContactSessionRsp& IMRecentContactSessionRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMRecentContactSessionRsp* IMRecentContactSessionRsp::default_instance_ = NULL;

IMRecentContactSessionRsp* IMRecentContactSessionRsp::New() const {
  return new IMRecentContactSessionRsp;
}

void IMRecentContactSessionRsp::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  contact_session_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMRecentContactSessionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMRecentContactSessionRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contact_session_list;
        break;
      }

      // repeated .IM.BaseDefine.ContactSessionInfo contact_session_list = 2;
      case 2: {
        if (tag == 18) {
         parse_contact_session_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contact_session_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contact_session_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMRecentContactSessionRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMRecentContactSessionRsp)
  return false;
#undef DO_
}

void IMRecentContactSessionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMRecentContactSessionRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated .IM.BaseDefine.ContactSessionInfo contact_session_list = 2;
  for (int i = 0; i < this->contact_session_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->contact_session_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMRecentContactSessionRsp)
}

int IMRecentContactSessionRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.ContactSessionInfo contact_session_list = 2;
  total_size += 1 * this->contact_session_list_size();
  for (int i = 0; i < this->contact_session_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contact_session_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMRecentContactSessionRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMRecentContactSessionRsp*>(&from));
}

void IMRecentContactSessionRsp::MergeFrom(const IMRecentContactSessionRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  contact_session_list_.MergeFrom(from.contact_session_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMRecentContactSessionRsp::CopyFrom(const IMRecentContactSessionRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMRecentContactSessionRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->contact_session_list())) return false;
  return true;
}

void IMRecentContactSessionRsp::Swap(IMRecentContactSessionRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    contact_session_list_.Swap(&other->contact_session_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMRecentContactSessionRsp::GetTypeName() const {
  return "IM.Buddy.IMRecentContactSessionRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUserStatNotify::kUserStatFieldNumber;
#endif  // !_MSC_VER

IMUserStatNotify::IMUserStatNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUserStatNotify)
}

void IMUserStatNotify::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_stat_ = const_cast< ::IM::BaseDefine::UserStat*>(
      ::IM::BaseDefine::UserStat::internal_default_instance());
#else
  user_stat_ = const_cast< ::IM::BaseDefine::UserStat*>(&::IM::BaseDefine::UserStat::default_instance());
#endif
}

IMUserStatNotify::IMUserStatNotify(const IMUserStatNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUserStatNotify)
}

void IMUserStatNotify::SharedCtor() {
  _cached_size_ = 0;
  user_stat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUserStatNotify::~IMUserStatNotify() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUserStatNotify)
  SharedDtor();
}

void IMUserStatNotify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_stat_;
  }
}

void IMUserStatNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUserStatNotify& IMUserStatNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMUserStatNotify* IMUserStatNotify::default_instance_ = NULL;

IMUserStatNotify* IMUserStatNotify::New() const {
  return new IMUserStatNotify;
}

void IMUserStatNotify::Clear() {
  if (has_user_stat()) {
    if (user_stat_ != NULL) user_stat_->::IM::BaseDefine::UserStat::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUserStatNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUserStatNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IM.BaseDefine.UserStat user_stat = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_stat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUserStatNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUserStatNotify)
  return false;
#undef DO_
}

void IMUserStatNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUserStatNotify)
  // required .IM.BaseDefine.UserStat user_stat = 1;
  if (has_user_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->user_stat(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUserStatNotify)
}

int IMUserStatNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IM.BaseDefine.UserStat user_stat = 1;
    if (has_user_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_stat());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUserStatNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUserStatNotify*>(&from));
}

void IMUserStatNotify::MergeFrom(const IMUserStatNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_stat()) {
      mutable_user_stat()->::IM::BaseDefine::UserStat::MergeFrom(from.user_stat());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUserStatNotify::CopyFrom(const IMUserStatNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUserStatNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_stat()) {
    if (!this->user_stat().IsInitialized()) return false;
  }
  return true;
}

void IMUserStatNotify::Swap(IMUserStatNotify* other) {
  if (other != this) {
    std::swap(user_stat_, other->user_stat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUserStatNotify::GetTypeName() const {
  return "IM.Buddy.IMUserStatNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUsersInfoReq::kUserIdFieldNumber;
const int IMUsersInfoReq::kUserIdListFieldNumber;
const int IMUsersInfoReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUsersInfoReq::IMUsersInfoReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUsersInfoReq)
}

void IMUsersInfoReq::InitAsDefaultInstance() {
}

IMUsersInfoReq::IMUsersInfoReq(const IMUsersInfoReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUsersInfoReq)
}

void IMUsersInfoReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUsersInfoReq::~IMUsersInfoReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUsersInfoReq)
  SharedDtor();
}

void IMUsersInfoReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUsersInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUsersInfoReq& IMUsersInfoReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMUsersInfoReq* IMUsersInfoReq::default_instance_ = NULL;

IMUsersInfoReq* IMUsersInfoReq::New() const {
  return new IMUsersInfoReq;
}

void IMUsersInfoReq::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  user_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUsersInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUsersInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id_list;
        break;
      }

      // repeated uint32 user_id_list = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_user_id_list())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_user_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUsersInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUsersInfoReq)
  return false;
#undef DO_
}

void IMUsersInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUsersInfoReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated uint32 user_id_list = 2;
  for (int i = 0; i < this->user_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->user_id_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUsersInfoReq)
}

int IMUsersInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 user_id_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->user_id_list(i));
    }
    total_size += 1 * this->user_id_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUsersInfoReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUsersInfoReq*>(&from));
}

void IMUsersInfoReq::MergeFrom(const IMUsersInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_list_.MergeFrom(from.user_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUsersInfoReq::CopyFrom(const IMUsersInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUsersInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IMUsersInfoReq::Swap(IMUsersInfoReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    user_id_list_.Swap(&other->user_id_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUsersInfoReq::GetTypeName() const {
  return "IM.Buddy.IMUsersInfoReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUsersInfoRsp::kUserIdFieldNumber;
const int IMUsersInfoRsp::kUserInfoListFieldNumber;
const int IMUsersInfoRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUsersInfoRsp::IMUsersInfoRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUsersInfoRsp)
}

void IMUsersInfoRsp::InitAsDefaultInstance() {
}

IMUsersInfoRsp::IMUsersInfoRsp(const IMUsersInfoRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUsersInfoRsp)
}

void IMUsersInfoRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUsersInfoRsp::~IMUsersInfoRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUsersInfoRsp)
  SharedDtor();
}

void IMUsersInfoRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUsersInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUsersInfoRsp& IMUsersInfoRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMUsersInfoRsp* IMUsersInfoRsp::default_instance_ = NULL;

IMUsersInfoRsp* IMUsersInfoRsp::New() const {
  return new IMUsersInfoRsp;
}

void IMUsersInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  user_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUsersInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUsersInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_info_list;
        break;
      }

      // repeated .IM.BaseDefine.UserInfo user_info_list = 2;
      case 2: {
        if (tag == 18) {
         parse_user_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_info_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUsersInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUsersInfoRsp)
  return false;
#undef DO_
}

void IMUsersInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUsersInfoRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated .IM.BaseDefine.UserInfo user_info_list = 2;
  for (int i = 0; i < this->user_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_info_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUsersInfoRsp)
}

int IMUsersInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.UserInfo user_info_list = 2;
  total_size += 1 * this->user_info_list_size();
  for (int i = 0; i < this->user_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_info_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUsersInfoRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUsersInfoRsp*>(&from));
}

void IMUsersInfoRsp::MergeFrom(const IMUsersInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_info_list_.MergeFrom(from.user_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUsersInfoRsp::CopyFrom(const IMUsersInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUsersInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->user_info_list())) return false;
  return true;
}

void IMUsersInfoRsp::Swap(IMUsersInfoRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    user_info_list_.Swap(&other->user_info_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUsersInfoRsp::GetTypeName() const {
  return "IM.Buddy.IMUsersInfoRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMRemoveSessionReq::kUserIdFieldNumber;
const int IMRemoveSessionReq::kSessionTypeFieldNumber;
const int IMRemoveSessionReq::kSessionIdFieldNumber;
const int IMRemoveSessionReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMRemoveSessionReq::IMRemoveSessionReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMRemoveSessionReq)
}

void IMRemoveSessionReq::InitAsDefaultInstance() {
}

IMRemoveSessionReq::IMRemoveSessionReq(const IMRemoveSessionReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMRemoveSessionReq)
}

void IMRemoveSessionReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMRemoveSessionReq::~IMRemoveSessionReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMRemoveSessionReq)
  SharedDtor();
}

void IMRemoveSessionReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMRemoveSessionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMRemoveSessionReq& IMRemoveSessionReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMRemoveSessionReq* IMRemoveSessionReq::default_instance_ = NULL;

IMRemoveSessionReq* IMRemoveSessionReq::New() const {
  return new IMRemoveSessionReq;
}

void IMRemoveSessionReq::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    user_id_ = 0u;
    session_type_ = 1;
    session_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMRemoveSessionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMRemoveSessionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMRemoveSessionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMRemoveSessionReq)
  return false;
#undef DO_
}

void IMRemoveSessionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMRemoveSessionReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMRemoveSessionReq)
}

int IMRemoveSessionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.SessionType session_type = 2;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required uint32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMRemoveSessionReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMRemoveSessionReq*>(&from));
}

void IMRemoveSessionReq::MergeFrom(const IMRemoveSessionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMRemoveSessionReq::CopyFrom(const IMRemoveSessionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMRemoveSessionReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMRemoveSessionReq::Swap(IMRemoveSessionReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(session_id_, other->session_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMRemoveSessionReq::GetTypeName() const {
  return "IM.Buddy.IMRemoveSessionReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMRemoveSessionRsp::kUserIdFieldNumber;
const int IMRemoveSessionRsp::kResultCodeFieldNumber;
const int IMRemoveSessionRsp::kSessionTypeFieldNumber;
const int IMRemoveSessionRsp::kSessionIdFieldNumber;
const int IMRemoveSessionRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMRemoveSessionRsp::IMRemoveSessionRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMRemoveSessionRsp)
}

void IMRemoveSessionRsp::InitAsDefaultInstance() {
}

IMRemoveSessionRsp::IMRemoveSessionRsp(const IMRemoveSessionRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMRemoveSessionRsp)
}

void IMRemoveSessionRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  result_code_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMRemoveSessionRsp::~IMRemoveSessionRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMRemoveSessionRsp)
  SharedDtor();
}

void IMRemoveSessionRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMRemoveSessionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMRemoveSessionRsp& IMRemoveSessionRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMRemoveSessionRsp* IMRemoveSessionRsp::default_instance_ = NULL;

IMRemoveSessionRsp* IMRemoveSessionRsp::New() const {
  return new IMRemoveSessionRsp;
}

void IMRemoveSessionRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMRemoveSessionRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(user_id_, result_code_);
    session_type_ = 1;
    session_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMRemoveSessionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMRemoveSessionRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 3;
      case 3: {
        if (tag == 24) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 4;
      case 4: {
        if (tag == 32) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMRemoveSessionRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMRemoveSessionRsp)
  return false;
#undef DO_
}

void IMRemoveSessionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMRemoveSessionRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 3;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->session_type(), output);
  }

  // required uint32 session_id = 4;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->session_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMRemoveSessionRsp)
}

int IMRemoveSessionRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // required .IM.BaseDefine.SessionType session_type = 3;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required uint32 session_id = 4;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMRemoveSessionRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMRemoveSessionRsp*>(&from));
}

void IMRemoveSessionRsp::MergeFrom(const IMRemoveSessionRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMRemoveSessionRsp::CopyFrom(const IMRemoveSessionRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMRemoveSessionRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMRemoveSessionRsp::Swap(IMRemoveSessionRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(session_type_, other->session_type_);
    std::swap(session_id_, other->session_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMRemoveSessionRsp::GetTypeName() const {
  return "IM.Buddy.IMRemoveSessionRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMAllUserReq::kUserIdFieldNumber;
const int IMAllUserReq::kLatestUpdateTimeFieldNumber;
const int IMAllUserReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMAllUserReq::IMAllUserReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMAllUserReq)
}

void IMAllUserReq::InitAsDefaultInstance() {
}

IMAllUserReq::IMAllUserReq(const IMAllUserReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMAllUserReq)
}

void IMAllUserReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  latest_update_time_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMAllUserReq::~IMAllUserReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMAllUserReq)
  SharedDtor();
}

void IMAllUserReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMAllUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMAllUserReq& IMAllUserReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMAllUserReq* IMAllUserReq::default_instance_ = NULL;

IMAllUserReq* IMAllUserReq::New() const {
  return new IMAllUserReq;
}

void IMAllUserReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMAllUserReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, latest_update_time_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMAllUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMAllUserReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_latest_update_time;
        break;
      }

      // required uint32 latest_update_time = 2;
      case 2: {
        if (tag == 16) {
         parse_latest_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_update_time_)));
          set_has_latest_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMAllUserReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMAllUserReq)
  return false;
#undef DO_
}

void IMAllUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMAllUserReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 latest_update_time = 2;
  if (has_latest_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->latest_update_time(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMAllUserReq)
}

int IMAllUserReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 latest_update_time = 2;
    if (has_latest_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->latest_update_time());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMAllUserReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMAllUserReq*>(&from));
}

void IMAllUserReq::MergeFrom(const IMAllUserReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_latest_update_time()) {
      set_latest_update_time(from.latest_update_time());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMAllUserReq::CopyFrom(const IMAllUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMAllUserReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMAllUserReq::Swap(IMAllUserReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(latest_update_time_, other->latest_update_time_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMAllUserReq::GetTypeName() const {
  return "IM.Buddy.IMAllUserReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMAllUserRsp::kUserIdFieldNumber;
const int IMAllUserRsp::kLatestUpdateTimeFieldNumber;
const int IMAllUserRsp::kUserListFieldNumber;
const int IMAllUserRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMAllUserRsp::IMAllUserRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMAllUserRsp)
}

void IMAllUserRsp::InitAsDefaultInstance() {
}

IMAllUserRsp::IMAllUserRsp(const IMAllUserRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMAllUserRsp)
}

void IMAllUserRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  latest_update_time_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMAllUserRsp::~IMAllUserRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMAllUserRsp)
  SharedDtor();
}

void IMAllUserRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMAllUserRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMAllUserRsp& IMAllUserRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMAllUserRsp* IMAllUserRsp::default_instance_ = NULL;

IMAllUserRsp* IMAllUserRsp::New() const {
  return new IMAllUserRsp;
}

void IMAllUserRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMAllUserRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(user_id_, latest_update_time_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMAllUserRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMAllUserRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_latest_update_time;
        break;
      }

      // required uint32 latest_update_time = 2;
      case 2: {
        if (tag == 16) {
         parse_latest_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_update_time_)));
          set_has_latest_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_list;
        break;
      }

      // repeated .IM.BaseDefine.UserInfo user_list = 3;
      case 3: {
        if (tag == 26) {
         parse_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMAllUserRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMAllUserRsp)
  return false;
#undef DO_
}

void IMAllUserRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMAllUserRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 latest_update_time = 2;
  if (has_latest_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->latest_update_time(), output);
  }

  // repeated .IM.BaseDefine.UserInfo user_list = 3;
  for (int i = 0; i < this->user_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->user_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMAllUserRsp)
}

int IMAllUserRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 latest_update_time = 2;
    if (has_latest_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->latest_update_time());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.UserInfo user_list = 3;
  total_size += 1 * this->user_list_size();
  for (int i = 0; i < this->user_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMAllUserRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMAllUserRsp*>(&from));
}

void IMAllUserRsp::MergeFrom(const IMAllUserRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_list_.MergeFrom(from.user_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_latest_update_time()) {
      set_latest_update_time(from.latest_update_time());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMAllUserRsp::CopyFrom(const IMAllUserRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMAllUserRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->user_list())) return false;
  return true;
}

void IMAllUserRsp::Swap(IMAllUserRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(latest_update_time_, other->latest_update_time_);
    user_list_.Swap(&other->user_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMAllUserRsp::GetTypeName() const {
  return "IM.Buddy.IMAllUserRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUsersStatReq::kUserIdFieldNumber;
const int IMUsersStatReq::kUserIdListFieldNumber;
const int IMUsersStatReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUsersStatReq::IMUsersStatReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUsersStatReq)
}

void IMUsersStatReq::InitAsDefaultInstance() {
}

IMUsersStatReq::IMUsersStatReq(const IMUsersStatReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUsersStatReq)
}

void IMUsersStatReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUsersStatReq::~IMUsersStatReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUsersStatReq)
  SharedDtor();
}

void IMUsersStatReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUsersStatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUsersStatReq& IMUsersStatReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMUsersStatReq* IMUsersStatReq::default_instance_ = NULL;

IMUsersStatReq* IMUsersStatReq::New() const {
  return new IMUsersStatReq;
}

void IMUsersStatReq::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  user_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUsersStatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUsersStatReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id_list;
        break;
      }

      // repeated uint32 user_id_list = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_user_id_list())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_user_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUsersStatReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUsersStatReq)
  return false;
#undef DO_
}

void IMUsersStatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUsersStatReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated uint32 user_id_list = 2;
  for (int i = 0; i < this->user_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->user_id_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUsersStatReq)
}

int IMUsersStatReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 user_id_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->user_id_list(i));
    }
    total_size += 1 * this->user_id_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUsersStatReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUsersStatReq*>(&from));
}

void IMUsersStatReq::MergeFrom(const IMUsersStatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_list_.MergeFrom(from.user_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUsersStatReq::CopyFrom(const IMUsersStatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUsersStatReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IMUsersStatReq::Swap(IMUsersStatReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    user_id_list_.Swap(&other->user_id_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUsersStatReq::GetTypeName() const {
  return "IM.Buddy.IMUsersStatReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUsersStatRsp::kUserIdFieldNumber;
const int IMUsersStatRsp::kUserStatListFieldNumber;
const int IMUsersStatRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUsersStatRsp::IMUsersStatRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUsersStatRsp)
}

void IMUsersStatRsp::InitAsDefaultInstance() {
}

IMUsersStatRsp::IMUsersStatRsp(const IMUsersStatRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUsersStatRsp)
}

void IMUsersStatRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUsersStatRsp::~IMUsersStatRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUsersStatRsp)
  SharedDtor();
}

void IMUsersStatRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUsersStatRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUsersStatRsp& IMUsersStatRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMUsersStatRsp* IMUsersStatRsp::default_instance_ = NULL;

IMUsersStatRsp* IMUsersStatRsp::New() const {
  return new IMUsersStatRsp;
}

void IMUsersStatRsp::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  user_stat_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUsersStatRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUsersStatRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_stat_list;
        break;
      }

      // repeated .IM.BaseDefine.UserStat user_stat_list = 2;
      case 2: {
        if (tag == 18) {
         parse_user_stat_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_stat_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_stat_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUsersStatRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUsersStatRsp)
  return false;
#undef DO_
}

void IMUsersStatRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUsersStatRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated .IM.BaseDefine.UserStat user_stat_list = 2;
  for (int i = 0; i < this->user_stat_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_stat_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUsersStatRsp)
}

int IMUsersStatRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.UserStat user_stat_list = 2;
  total_size += 1 * this->user_stat_list_size();
  for (int i = 0; i < this->user_stat_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_stat_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUsersStatRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUsersStatRsp*>(&from));
}

void IMUsersStatRsp::MergeFrom(const IMUsersStatRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_stat_list_.MergeFrom(from.user_stat_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUsersStatRsp::CopyFrom(const IMUsersStatRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUsersStatRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->user_stat_list())) return false;
  return true;
}

void IMUsersStatRsp::Swap(IMUsersStatRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    user_stat_list_.Swap(&other->user_stat_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUsersStatRsp::GetTypeName() const {
  return "IM.Buddy.IMUsersStatRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMChangeAvatarReq::kUserIdFieldNumber;
const int IMChangeAvatarReq::kAvatarUrlFieldNumber;
const int IMChangeAvatarReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMChangeAvatarReq::IMChangeAvatarReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMChangeAvatarReq)
}

void IMChangeAvatarReq::InitAsDefaultInstance() {
}

IMChangeAvatarReq::IMChangeAvatarReq(const IMChangeAvatarReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMChangeAvatarReq)
}

void IMChangeAvatarReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMChangeAvatarReq::~IMChangeAvatarReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMChangeAvatarReq)
  SharedDtor();
}

void IMChangeAvatarReq::SharedDtor() {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_url_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMChangeAvatarReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMChangeAvatarReq& IMChangeAvatarReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMChangeAvatarReq* IMChangeAvatarReq::default_instance_ = NULL;

IMChangeAvatarReq* IMChangeAvatarReq::New() const {
  return new IMChangeAvatarReq;
}

void IMChangeAvatarReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = 0u;
    if (has_avatar_url()) {
      if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_url_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMChangeAvatarReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMChangeAvatarReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_avatar_url;
        break;
      }

      // required string avatar_url = 2;
      case 2: {
        if (tag == 18) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMChangeAvatarReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMChangeAvatarReq)
  return false;
#undef DO_
}

void IMChangeAvatarReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMChangeAvatarReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required string avatar_url = 2;
  if (has_avatar_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->avatar_url(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMChangeAvatarReq)
}

int IMChangeAvatarReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required string avatar_url = 2;
    if (has_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar_url());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMChangeAvatarReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMChangeAvatarReq*>(&from));
}

void IMChangeAvatarReq::MergeFrom(const IMChangeAvatarReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_avatar_url()) {
      set_avatar_url(from.avatar_url());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMChangeAvatarReq::CopyFrom(const IMChangeAvatarReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMChangeAvatarReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMChangeAvatarReq::Swap(IMChangeAvatarReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(avatar_url_, other->avatar_url_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMChangeAvatarReq::GetTypeName() const {
  return "IM.Buddy.IMChangeAvatarReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMChangeAvatarRsp::kUserIdFieldNumber;
const int IMChangeAvatarRsp::kResultCodeFieldNumber;
const int IMChangeAvatarRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMChangeAvatarRsp::IMChangeAvatarRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMChangeAvatarRsp)
}

void IMChangeAvatarRsp::InitAsDefaultInstance() {
}

IMChangeAvatarRsp::IMChangeAvatarRsp(const IMChangeAvatarRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMChangeAvatarRsp)
}

void IMChangeAvatarRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  result_code_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMChangeAvatarRsp::~IMChangeAvatarRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMChangeAvatarRsp)
  SharedDtor();
}

void IMChangeAvatarRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMChangeAvatarRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMChangeAvatarRsp& IMChangeAvatarRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMChangeAvatarRsp* IMChangeAvatarRsp::default_instance_ = NULL;

IMChangeAvatarRsp* IMChangeAvatarRsp::New() const {
  return new IMChangeAvatarRsp;
}

void IMChangeAvatarRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMChangeAvatarRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, result_code_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMChangeAvatarRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMChangeAvatarRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMChangeAvatarRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMChangeAvatarRsp)
  return false;
#undef DO_
}

void IMChangeAvatarRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMChangeAvatarRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMChangeAvatarRsp)
}

int IMChangeAvatarRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMChangeAvatarRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMChangeAvatarRsp*>(&from));
}

void IMChangeAvatarRsp::MergeFrom(const IMChangeAvatarRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMChangeAvatarRsp::CopyFrom(const IMChangeAvatarRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMChangeAvatarRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMChangeAvatarRsp::Swap(IMChangeAvatarRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMChangeAvatarRsp::GetTypeName() const {
  return "IM.Buddy.IMChangeAvatarRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMPCLoginStatusNotify::kUserIdFieldNumber;
const int IMPCLoginStatusNotify::kLoginStatFieldNumber;
#endif  // !_MSC_VER

IMPCLoginStatusNotify::IMPCLoginStatusNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMPCLoginStatusNotify)
}

void IMPCLoginStatusNotify::InitAsDefaultInstance() {
}

IMPCLoginStatusNotify::IMPCLoginStatusNotify(const IMPCLoginStatusNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMPCLoginStatusNotify)
}

void IMPCLoginStatusNotify::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  login_stat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMPCLoginStatusNotify::~IMPCLoginStatusNotify() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMPCLoginStatusNotify)
  SharedDtor();
}

void IMPCLoginStatusNotify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMPCLoginStatusNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMPCLoginStatusNotify& IMPCLoginStatusNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMPCLoginStatusNotify* IMPCLoginStatusNotify::default_instance_ = NULL;

IMPCLoginStatusNotify* IMPCLoginStatusNotify::New() const {
  return new IMPCLoginStatusNotify;
}

void IMPCLoginStatusNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMPCLoginStatusNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user_id_, login_stat_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMPCLoginStatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMPCLoginStatusNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_login_stat;
        break;
      }

      // required .IM.BaseDefine.UserStatType login_stat = 2;
      case 2: {
        if (tag == 16) {
         parse_login_stat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::UserStatType_IsValid(value)) {
            set_login_stat(static_cast< ::IM::BaseDefine::UserStatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMPCLoginStatusNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMPCLoginStatusNotify)
  return false;
#undef DO_
}

void IMPCLoginStatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMPCLoginStatusNotify)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.UserStatType login_stat = 2;
  if (has_login_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->login_stat(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMPCLoginStatusNotify)
}

int IMPCLoginStatusNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.UserStatType login_stat = 2;
    if (has_login_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->login_stat());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMPCLoginStatusNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMPCLoginStatusNotify*>(&from));
}

void IMPCLoginStatusNotify::MergeFrom(const IMPCLoginStatusNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_login_stat()) {
      set_login_stat(from.login_stat());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMPCLoginStatusNotify::CopyFrom(const IMPCLoginStatusNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMPCLoginStatusNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMPCLoginStatusNotify::Swap(IMPCLoginStatusNotify* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(login_stat_, other->login_stat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMPCLoginStatusNotify::GetTypeName() const {
  return "IM.Buddy.IMPCLoginStatusNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int IMRemoveSessionNotify::kUserIdFieldNumber;
const int IMRemoveSessionNotify::kSessionTypeFieldNumber;
const int IMRemoveSessionNotify::kSessionIdFieldNumber;
#endif  // !_MSC_VER

IMRemoveSessionNotify::IMRemoveSessionNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMRemoveSessionNotify)
}

void IMRemoveSessionNotify::InitAsDefaultInstance() {
}

IMRemoveSessionNotify::IMRemoveSessionNotify(const IMRemoveSessionNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMRemoveSessionNotify)
}

void IMRemoveSessionNotify::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMRemoveSessionNotify::~IMRemoveSessionNotify() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMRemoveSessionNotify)
  SharedDtor();
}

void IMRemoveSessionNotify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMRemoveSessionNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMRemoveSessionNotify& IMRemoveSessionNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMRemoveSessionNotify* IMRemoveSessionNotify::default_instance_ = NULL;

IMRemoveSessionNotify* IMRemoveSessionNotify::New() const {
  return new IMRemoveSessionNotify;
}

void IMRemoveSessionNotify::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = 0u;
    session_type_ = 1;
    session_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMRemoveSessionNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMRemoveSessionNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMRemoveSessionNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMRemoveSessionNotify)
  return false;
#undef DO_
}

void IMRemoveSessionNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMRemoveSessionNotify)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMRemoveSessionNotify)
}

int IMRemoveSessionNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.SessionType session_type = 2;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required uint32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMRemoveSessionNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMRemoveSessionNotify*>(&from));
}

void IMRemoveSessionNotify::MergeFrom(const IMRemoveSessionNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMRemoveSessionNotify::CopyFrom(const IMRemoveSessionNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMRemoveSessionNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMRemoveSessionNotify::Swap(IMRemoveSessionNotify* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMRemoveSessionNotify::GetTypeName() const {
  return "IM.Buddy.IMRemoveSessionNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int IMDepartmentReq::kUserIdFieldNumber;
const int IMDepartmentReq::kLatestUpdateTimeFieldNumber;
const int IMDepartmentReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMDepartmentReq::IMDepartmentReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMDepartmentReq)
}

void IMDepartmentReq::InitAsDefaultInstance() {
}

IMDepartmentReq::IMDepartmentReq(const IMDepartmentReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMDepartmentReq)
}

void IMDepartmentReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  latest_update_time_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMDepartmentReq::~IMDepartmentReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMDepartmentReq)
  SharedDtor();
}

void IMDepartmentReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMDepartmentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMDepartmentReq& IMDepartmentReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMDepartmentReq* IMDepartmentReq::default_instance_ = NULL;

IMDepartmentReq* IMDepartmentReq::New() const {
  return new IMDepartmentReq;
}

void IMDepartmentReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMDepartmentReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, latest_update_time_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMDepartmentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMDepartmentReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_latest_update_time;
        break;
      }

      // required uint32 latest_update_time = 2;
      case 2: {
        if (tag == 16) {
         parse_latest_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_update_time_)));
          set_has_latest_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMDepartmentReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMDepartmentReq)
  return false;
#undef DO_
}

void IMDepartmentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMDepartmentReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 latest_update_time = 2;
  if (has_latest_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->latest_update_time(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMDepartmentReq)
}

int IMDepartmentReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 latest_update_time = 2;
    if (has_latest_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->latest_update_time());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDepartmentReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMDepartmentReq*>(&from));
}

void IMDepartmentReq::MergeFrom(const IMDepartmentReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_latest_update_time()) {
      set_latest_update_time(from.latest_update_time());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMDepartmentReq::CopyFrom(const IMDepartmentReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDepartmentReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMDepartmentReq::Swap(IMDepartmentReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(latest_update_time_, other->latest_update_time_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMDepartmentReq::GetTypeName() const {
  return "IM.Buddy.IMDepartmentReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMDepartmentRsp::kUserIdFieldNumber;
const int IMDepartmentRsp::kLatestUpdateTimeFieldNumber;
const int IMDepartmentRsp::kDeptListFieldNumber;
const int IMDepartmentRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMDepartmentRsp::IMDepartmentRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMDepartmentRsp)
}

void IMDepartmentRsp::InitAsDefaultInstance() {
}

IMDepartmentRsp::IMDepartmentRsp(const IMDepartmentRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMDepartmentRsp)
}

void IMDepartmentRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  latest_update_time_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMDepartmentRsp::~IMDepartmentRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMDepartmentRsp)
  SharedDtor();
}

void IMDepartmentRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMDepartmentRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMDepartmentRsp& IMDepartmentRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMDepartmentRsp* IMDepartmentRsp::default_instance_ = NULL;

IMDepartmentRsp* IMDepartmentRsp::New() const {
  return new IMDepartmentRsp;
}

void IMDepartmentRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMDepartmentRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(user_id_, latest_update_time_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  dept_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMDepartmentRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMDepartmentRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_latest_update_time;
        break;
      }

      // required uint32 latest_update_time = 2;
      case 2: {
        if (tag == 16) {
         parse_latest_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_update_time_)));
          set_has_latest_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dept_list;
        break;
      }

      // repeated .IM.BaseDefine.DepartInfo dept_list = 3;
      case 3: {
        if (tag == 26) {
         parse_dept_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dept_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dept_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMDepartmentRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMDepartmentRsp)
  return false;
#undef DO_
}

void IMDepartmentRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMDepartmentRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 latest_update_time = 2;
  if (has_latest_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->latest_update_time(), output);
  }

  // repeated .IM.BaseDefine.DepartInfo dept_list = 3;
  for (int i = 0; i < this->dept_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->dept_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMDepartmentRsp)
}

int IMDepartmentRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 latest_update_time = 2;
    if (has_latest_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->latest_update_time());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.DepartInfo dept_list = 3;
  total_size += 1 * this->dept_list_size();
  for (int i = 0; i < this->dept_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dept_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDepartmentRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMDepartmentRsp*>(&from));
}

void IMDepartmentRsp::MergeFrom(const IMDepartmentRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  dept_list_.MergeFrom(from.dept_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_latest_update_time()) {
      set_latest_update_time(from.latest_update_time());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMDepartmentRsp::CopyFrom(const IMDepartmentRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDepartmentRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->dept_list())) return false;
  return true;
}

void IMDepartmentRsp::Swap(IMDepartmentRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(latest_update_time_, other->latest_update_time_);
    dept_list_.Swap(&other->dept_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMDepartmentRsp::GetTypeName() const {
  return "IM.Buddy.IMDepartmentRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMAvatarChangedNotify::kChangedUserIdFieldNumber;
const int IMAvatarChangedNotify::kAvatarUrlFieldNumber;
#endif  // !_MSC_VER

IMAvatarChangedNotify::IMAvatarChangedNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMAvatarChangedNotify)
}

void IMAvatarChangedNotify::InitAsDefaultInstance() {
}

IMAvatarChangedNotify::IMAvatarChangedNotify(const IMAvatarChangedNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMAvatarChangedNotify)
}

void IMAvatarChangedNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  changed_user_id_ = 0u;
  avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMAvatarChangedNotify::~IMAvatarChangedNotify() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMAvatarChangedNotify)
  SharedDtor();
}

void IMAvatarChangedNotify::SharedDtor() {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMAvatarChangedNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMAvatarChangedNotify& IMAvatarChangedNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMAvatarChangedNotify* IMAvatarChangedNotify::default_instance_ = NULL;

IMAvatarChangedNotify* IMAvatarChangedNotify::New() const {
  return new IMAvatarChangedNotify;
}

void IMAvatarChangedNotify::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    changed_user_id_ = 0u;
    if (has_avatar_url()) {
      if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMAvatarChangedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMAvatarChangedNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 changed_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &changed_user_id_)));
          set_has_changed_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_avatar_url;
        break;
      }

      // required string avatar_url = 2;
      case 2: {
        if (tag == 18) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMAvatarChangedNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMAvatarChangedNotify)
  return false;
#undef DO_
}

void IMAvatarChangedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMAvatarChangedNotify)
  // required uint32 changed_user_id = 1;
  if (has_changed_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->changed_user_id(), output);
  }

  // required string avatar_url = 2;
  if (has_avatar_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->avatar_url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMAvatarChangedNotify)
}

int IMAvatarChangedNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 changed_user_id = 1;
    if (has_changed_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->changed_user_id());
    }

    // required string avatar_url = 2;
    if (has_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar_url());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMAvatarChangedNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMAvatarChangedNotify*>(&from));
}

void IMAvatarChangedNotify::MergeFrom(const IMAvatarChangedNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_changed_user_id()) {
      set_changed_user_id(from.changed_user_id());
    }
    if (from.has_avatar_url()) {
      set_avatar_url(from.avatar_url());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMAvatarChangedNotify::CopyFrom(const IMAvatarChangedNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMAvatarChangedNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMAvatarChangedNotify::Swap(IMAvatarChangedNotify* other) {
  if (other != this) {
    std::swap(changed_user_id_, other->changed_user_id_);
    std::swap(avatar_url_, other->avatar_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMAvatarChangedNotify::GetTypeName() const {
  return "IM.Buddy.IMAvatarChangedNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int IMChangeSignInfoReq::kUserIdFieldNumber;
const int IMChangeSignInfoReq::kSignInfoFieldNumber;
const int IMChangeSignInfoReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMChangeSignInfoReq::IMChangeSignInfoReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMChangeSignInfoReq)
}

void IMChangeSignInfoReq::InitAsDefaultInstance() {
}

IMChangeSignInfoReq::IMChangeSignInfoReq(const IMChangeSignInfoReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMChangeSignInfoReq)
}

void IMChangeSignInfoReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  sign_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMChangeSignInfoReq::~IMChangeSignInfoReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMChangeSignInfoReq)
  SharedDtor();
}

void IMChangeSignInfoReq::SharedDtor() {
  if (sign_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_info_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMChangeSignInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMChangeSignInfoReq& IMChangeSignInfoReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMChangeSignInfoReq* IMChangeSignInfoReq::default_instance_ = NULL;

IMChangeSignInfoReq* IMChangeSignInfoReq::New() const {
  return new IMChangeSignInfoReq;
}

void IMChangeSignInfoReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = 0u;
    if (has_sign_info()) {
      if (sign_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_info_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMChangeSignInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMChangeSignInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sign_info;
        break;
      }

      // required string sign_info = 2;
      case 2: {
        if (tag == 18) {
         parse_sign_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMChangeSignInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMChangeSignInfoReq)
  return false;
#undef DO_
}

void IMChangeSignInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMChangeSignInfoReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required string sign_info = 2;
  if (has_sign_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sign_info(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMChangeSignInfoReq)
}

int IMChangeSignInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required string sign_info = 2;
    if (has_sign_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign_info());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMChangeSignInfoReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMChangeSignInfoReq*>(&from));
}

void IMChangeSignInfoReq::MergeFrom(const IMChangeSignInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_sign_info()) {
      set_sign_info(from.sign_info());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMChangeSignInfoReq::CopyFrom(const IMChangeSignInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMChangeSignInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMChangeSignInfoReq::Swap(IMChangeSignInfoReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(sign_info_, other->sign_info_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMChangeSignInfoReq::GetTypeName() const {
  return "IM.Buddy.IMChangeSignInfoReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMChangeSignInfoRsp::kUserIdFieldNumber;
const int IMChangeSignInfoRsp::kResultCodeFieldNumber;
const int IMChangeSignInfoRsp::kSignInfoFieldNumber;
const int IMChangeSignInfoRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMChangeSignInfoRsp::IMChangeSignInfoRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMChangeSignInfoRsp)
}

void IMChangeSignInfoRsp::InitAsDefaultInstance() {
}

IMChangeSignInfoRsp::IMChangeSignInfoRsp(const IMChangeSignInfoRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMChangeSignInfoRsp)
}

void IMChangeSignInfoRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  result_code_ = 0u;
  sign_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMChangeSignInfoRsp::~IMChangeSignInfoRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMChangeSignInfoRsp)
  SharedDtor();
}

void IMChangeSignInfoRsp::SharedDtor() {
  if (sign_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_info_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMChangeSignInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMChangeSignInfoRsp& IMChangeSignInfoRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMChangeSignInfoRsp* IMChangeSignInfoRsp::default_instance_ = NULL;

IMChangeSignInfoRsp* IMChangeSignInfoRsp::New() const {
  return new IMChangeSignInfoRsp;
}

void IMChangeSignInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMChangeSignInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, result_code_);
    if (has_sign_info()) {
      if (sign_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_info_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMChangeSignInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMChangeSignInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sign_info;
        break;
      }

      // optional string sign_info = 3;
      case 3: {
        if (tag == 26) {
         parse_sign_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMChangeSignInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMChangeSignInfoRsp)
  return false;
#undef DO_
}

void IMChangeSignInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMChangeSignInfoRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // optional string sign_info = 3;
  if (has_sign_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sign_info(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMChangeSignInfoRsp)
}

int IMChangeSignInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional string sign_info = 3;
    if (has_sign_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign_info());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMChangeSignInfoRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMChangeSignInfoRsp*>(&from));
}

void IMChangeSignInfoRsp::MergeFrom(const IMChangeSignInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_sign_info()) {
      set_sign_info(from.sign_info());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMChangeSignInfoRsp::CopyFrom(const IMChangeSignInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMChangeSignInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMChangeSignInfoRsp::Swap(IMChangeSignInfoRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(sign_info_, other->sign_info_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMChangeSignInfoRsp::GetTypeName() const {
  return "IM.Buddy.IMChangeSignInfoRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMSignInfoChangedNotify::kChangedUserIdFieldNumber;
const int IMSignInfoChangedNotify::kSignInfoFieldNumber;
#endif  // !_MSC_VER

IMSignInfoChangedNotify::IMSignInfoChangedNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMSignInfoChangedNotify)
}

void IMSignInfoChangedNotify::InitAsDefaultInstance() {
}

IMSignInfoChangedNotify::IMSignInfoChangedNotify(const IMSignInfoChangedNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMSignInfoChangedNotify)
}

void IMSignInfoChangedNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  changed_user_id_ = 0u;
  sign_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMSignInfoChangedNotify::~IMSignInfoChangedNotify() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMSignInfoChangedNotify)
  SharedDtor();
}

void IMSignInfoChangedNotify::SharedDtor() {
  if (sign_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_info_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMSignInfoChangedNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMSignInfoChangedNotify& IMSignInfoChangedNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMSignInfoChangedNotify* IMSignInfoChangedNotify::default_instance_ = NULL;

IMSignInfoChangedNotify* IMSignInfoChangedNotify::New() const {
  return new IMSignInfoChangedNotify;
}

void IMSignInfoChangedNotify::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    changed_user_id_ = 0u;
    if (has_sign_info()) {
      if (sign_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMSignInfoChangedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMSignInfoChangedNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 changed_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &changed_user_id_)));
          set_has_changed_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sign_info;
        break;
      }

      // required string sign_info = 2;
      case 2: {
        if (tag == 18) {
         parse_sign_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMSignInfoChangedNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMSignInfoChangedNotify)
  return false;
#undef DO_
}

void IMSignInfoChangedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMSignInfoChangedNotify)
  // required uint32 changed_user_id = 1;
  if (has_changed_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->changed_user_id(), output);
  }

  // required string sign_info = 2;
  if (has_sign_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sign_info(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMSignInfoChangedNotify)
}

int IMSignInfoChangedNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 changed_user_id = 1;
    if (has_changed_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->changed_user_id());
    }

    // required string sign_info = 2;
    if (has_sign_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign_info());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMSignInfoChangedNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMSignInfoChangedNotify*>(&from));
}

void IMSignInfoChangedNotify::MergeFrom(const IMSignInfoChangedNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_changed_user_id()) {
      set_changed_user_id(from.changed_user_id());
    }
    if (from.has_sign_info()) {
      set_sign_info(from.sign_info());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMSignInfoChangedNotify::CopyFrom(const IMSignInfoChangedNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMSignInfoChangedNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMSignInfoChangedNotify::Swap(IMSignInfoChangedNotify* other) {
  if (other != this) {
    std::swap(changed_user_id_, other->changed_user_id_);
    std::swap(sign_info_, other->sign_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMSignInfoChangedNotify::GetTypeName() const {
  return "IM.Buddy.IMSignInfoChangedNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUserSearchReq::kUserIdFieldNumber;
const int IMUserSearchReq::kUserNameFieldNumber;
const int IMUserSearchReq::kSearchTypeFieldNumber;
const int IMUserSearchReq::kSearchSeqFieldNumber;
const int IMUserSearchReq::kPageSizeFieldNumber;
const int IMUserSearchReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUserSearchReq::IMUserSearchReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUserSearchReq)
}

void IMUserSearchReq::InitAsDefaultInstance() {
}

IMUserSearchReq::IMUserSearchReq(const IMUserSearchReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUserSearchReq)
}

void IMUserSearchReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_type_ = 0u;
  search_seq_ = 0u;
  page_size_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUserSearchReq::~IMUserSearchReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUserSearchReq)
  SharedDtor();
}

void IMUserSearchReq::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUserSearchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUserSearchReq& IMUserSearchReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMUserSearchReq* IMUserSearchReq::default_instance_ = NULL;

IMUserSearchReq* IMUserSearchReq::New() const {
  return new IMUserSearchReq;
}

void IMUserSearchReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMUserSearchReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(user_id_, page_size_);
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_name_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUserSearchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUserSearchReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }

      // required string user_name = 2;
      case 2: {
        if (tag == 18) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_search_type;
        break;
      }

      // required uint32 search_type = 3;
      case 3: {
        if (tag == 24) {
         parse_search_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_type_)));
          set_has_search_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_search_seq;
        break;
      }

      // required uint32 search_seq = 4;
      case 4: {
        if (tag == 32) {
         parse_search_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_seq_)));
          set_has_search_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_page_size;
        break;
      }

      // required uint32 page_size = 5;
      case 5: {
        if (tag == 40) {
         parse_page_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_size_)));
          set_has_page_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUserSearchReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUserSearchReq)
  return false;
#undef DO_
}

void IMUserSearchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUserSearchReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_name(), output);
  }

  // required uint32 search_type = 3;
  if (has_search_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->search_type(), output);
  }

  // required uint32 search_seq = 4;
  if (has_search_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->search_seq(), output);
  }

  // required uint32 page_size = 5;
  if (has_page_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->page_size(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUserSearchReq)
}

int IMUserSearchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required uint32 search_type = 3;
    if (has_search_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_type());
    }

    // required uint32 search_seq = 4;
    if (has_search_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_seq());
    }

    // required uint32 page_size = 5;
    if (has_page_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_size());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUserSearchReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUserSearchReq*>(&from));
}

void IMUserSearchReq::MergeFrom(const IMUserSearchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_search_type()) {
      set_search_type(from.search_type());
    }
    if (from.has_search_seq()) {
      set_search_seq(from.search_seq());
    }
    if (from.has_page_size()) {
      set_page_size(from.page_size());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUserSearchReq::CopyFrom(const IMUserSearchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUserSearchReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void IMUserSearchReq::Swap(IMUserSearchReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(search_type_, other->search_type_);
    std::swap(search_seq_, other->search_seq_);
    std::swap(page_size_, other->page_size_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUserSearchReq::GetTypeName() const {
  return "IM.Buddy.IMUserSearchReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUserSearchRsp::kUserIdFieldNumber;
const int IMUserSearchRsp::kSearchTypeFieldNumber;
const int IMUserSearchRsp::kSearchReaultFieldNumber;
const int IMUserSearchRsp::kSearchSeqFieldNumber;
const int IMUserSearchRsp::kUserInfoListFieldNumber;
const int IMUserSearchRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUserSearchRsp::IMUserSearchRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUserSearchRsp)
}

void IMUserSearchRsp::InitAsDefaultInstance() {
}

IMUserSearchRsp::IMUserSearchRsp(const IMUserSearchRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUserSearchRsp)
}

void IMUserSearchRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  search_type_ = 0u;
  search_reault_ = 0u;
  search_seq_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUserSearchRsp::~IMUserSearchRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUserSearchRsp)
  SharedDtor();
}

void IMUserSearchRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUserSearchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUserSearchRsp& IMUserSearchRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMUserSearchRsp* IMUserSearchRsp::default_instance_ = NULL;

IMUserSearchRsp* IMUserSearchRsp::New() const {
  return new IMUserSearchRsp;
}

void IMUserSearchRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMUserSearchRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(user_id_, search_seq_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  user_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUserSearchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUserSearchRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_search_type;
        break;
      }

      // required uint32 search_type = 2;
      case 2: {
        if (tag == 16) {
         parse_search_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_type_)));
          set_has_search_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_search_reault;
        break;
      }

      // required uint32 search_reault = 3;
      case 3: {
        if (tag == 24) {
         parse_search_reault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_reault_)));
          set_has_search_reault();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_search_seq;
        break;
      }

      // required uint32 search_seq = 4;
      case 4: {
        if (tag == 32) {
         parse_search_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_seq_)));
          set_has_search_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_user_info_list;
        break;
      }

      // repeated .IM.BaseDefine.UserInfo user_info_list = 5;
      case 5: {
        if (tag == 42) {
         parse_user_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_user_info_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUserSearchRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUserSearchRsp)
  return false;
#undef DO_
}

void IMUserSearchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUserSearchRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 search_type = 2;
  if (has_search_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->search_type(), output);
  }

  // required uint32 search_reault = 3;
  if (has_search_reault()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->search_reault(), output);
  }

  // required uint32 search_seq = 4;
  if (has_search_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->search_seq(), output);
  }

  // repeated .IM.BaseDefine.UserInfo user_info_list = 5;
  for (int i = 0; i < this->user_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->user_info_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUserSearchRsp)
}

int IMUserSearchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 search_type = 2;
    if (has_search_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_type());
    }

    // required uint32 search_reault = 3;
    if (has_search_reault()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_reault());
    }

    // required uint32 search_seq = 4;
    if (has_search_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_seq());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.UserInfo user_info_list = 5;
  total_size += 1 * this->user_info_list_size();
  for (int i = 0; i < this->user_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_info_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUserSearchRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUserSearchRsp*>(&from));
}

void IMUserSearchRsp::MergeFrom(const IMUserSearchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_info_list_.MergeFrom(from.user_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_search_type()) {
      set_search_type(from.search_type());
    }
    if (from.has_search_reault()) {
      set_search_reault(from.search_reault());
    }
    if (from.has_search_seq()) {
      set_search_seq(from.search_seq());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUserSearchRsp::CopyFrom(const IMUserSearchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUserSearchRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->user_info_list())) return false;
  return true;
}

void IMUserSearchRsp::Swap(IMUserSearchRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(search_type_, other->search_type_);
    std::swap(search_reault_, other->search_reault_);
    std::swap(search_seq_, other->search_seq_);
    user_info_list_.Swap(&other->user_info_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUserSearchRsp::GetTypeName() const {
  return "IM.Buddy.IMUserSearchRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUserAddFriendReq::kUserIdFieldNumber;
const int IMUserAddFriendReq::kAddIdFieldNumber;
const int IMUserAddFriendReq::kStrValidFieldNumber;
const int IMUserAddFriendReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUserAddFriendReq::IMUserAddFriendReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUserAddFriendReq)
}

void IMUserAddFriendReq::InitAsDefaultInstance() {
}

IMUserAddFriendReq::IMUserAddFriendReq(const IMUserAddFriendReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUserAddFriendReq)
}

void IMUserAddFriendReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  add_id_ = 0u;
  str_valid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUserAddFriendReq::~IMUserAddFriendReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUserAddFriendReq)
  SharedDtor();
}

void IMUserAddFriendReq::SharedDtor() {
  if (str_valid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_valid_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUserAddFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUserAddFriendReq& IMUserAddFriendReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMUserAddFriendReq* IMUserAddFriendReq::default_instance_ = NULL;

IMUserAddFriendReq* IMUserAddFriendReq::New() const {
  return new IMUserAddFriendReq;
}

void IMUserAddFriendReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMUserAddFriendReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, add_id_);
    if (has_str_valid()) {
      if (str_valid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        str_valid_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUserAddFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUserAddFriendReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_add_id;
        break;
      }

      // required uint32 add_id = 2;
      case 2: {
        if (tag == 16) {
         parse_add_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_id_)));
          set_has_add_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_str_valid;
        break;
      }

      // optional string str_valid = 3;
      case 3: {
        if (tag == 26) {
         parse_str_valid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_valid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUserAddFriendReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUserAddFriendReq)
  return false;
#undef DO_
}

void IMUserAddFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUserAddFriendReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 add_id = 2;
  if (has_add_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->add_id(), output);
  }

  // optional string str_valid = 3;
  if (has_str_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->str_valid(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUserAddFriendReq)
}

int IMUserAddFriendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 add_id = 2;
    if (has_add_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_id());
    }

    // optional string str_valid = 3;
    if (has_str_valid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_valid());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUserAddFriendReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUserAddFriendReq*>(&from));
}

void IMUserAddFriendReq::MergeFrom(const IMUserAddFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_add_id()) {
      set_add_id(from.add_id());
    }
    if (from.has_str_valid()) {
      set_str_valid(from.str_valid());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUserAddFriendReq::CopyFrom(const IMUserAddFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUserAddFriendReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMUserAddFriendReq::Swap(IMUserAddFriendReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(add_id_, other->add_id_);
    std::swap(str_valid_, other->str_valid_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUserAddFriendReq::GetTypeName() const {
  return "IM.Buddy.IMUserAddFriendReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUserAddFriendRsp::kUserIdFieldNumber;
const int IMUserAddFriendRsp::kAddIdFieldNumber;
const int IMUserAddFriendRsp::kResultCodeFieldNumber;
const int IMUserAddFriendRsp::kResultDesFieldNumber;
const int IMUserAddFriendRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUserAddFriendRsp::IMUserAddFriendRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUserAddFriendRsp)
}

void IMUserAddFriendRsp::InitAsDefaultInstance() {
}

IMUserAddFriendRsp::IMUserAddFriendRsp(const IMUserAddFriendRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUserAddFriendRsp)
}

void IMUserAddFriendRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  add_id_ = 0u;
  result_code_ = 0u;
  result_des_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUserAddFriendRsp::~IMUserAddFriendRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUserAddFriendRsp)
  SharedDtor();
}

void IMUserAddFriendRsp::SharedDtor() {
  if (result_des_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_des_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUserAddFriendRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUserAddFriendRsp& IMUserAddFriendRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMUserAddFriendRsp* IMUserAddFriendRsp::default_instance_ = NULL;

IMUserAddFriendRsp* IMUserAddFriendRsp::New() const {
  return new IMUserAddFriendRsp;
}

void IMUserAddFriendRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMUserAddFriendRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(user_id_, add_id_);
    result_code_ = 0u;
    if (has_result_des()) {
      if (result_des_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_des_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUserAddFriendRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUserAddFriendRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_add_id;
        break;
      }

      // required uint32 add_id = 2;
      case 2: {
        if (tag == 16) {
         parse_add_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_id_)));
          set_has_add_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 3;
      case 3: {
        if (tag == 24) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_result_des;
        break;
      }

      // required string result_des = 4;
      case 4: {
        if (tag == 34) {
         parse_result_des:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_des()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUserAddFriendRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUserAddFriendRsp)
  return false;
#undef DO_
}

void IMUserAddFriendRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUserAddFriendRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 add_id = 2;
  if (has_add_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->add_id(), output);
  }

  // required uint32 result_code = 3;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result_code(), output);
  }

  // required string result_des = 4;
  if (has_result_des()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->result_des(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUserAddFriendRsp)
}

int IMUserAddFriendRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 add_id = 2;
    if (has_add_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_id());
    }

    // required uint32 result_code = 3;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // required string result_des = 4;
    if (has_result_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result_des());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUserAddFriendRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUserAddFriendRsp*>(&from));
}

void IMUserAddFriendRsp::MergeFrom(const IMUserAddFriendRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_add_id()) {
      set_add_id(from.add_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_result_des()) {
      set_result_des(from.result_des());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUserAddFriendRsp::CopyFrom(const IMUserAddFriendRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUserAddFriendRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMUserAddFriendRsp::Swap(IMUserAddFriendRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(add_id_, other->add_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(result_des_, other->result_des_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUserAddFriendRsp::GetTypeName() const {
  return "IM.Buddy.IMUserAddFriendRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUserRemFriendReq::kUserIdFieldNumber;
const int IMUserRemFriendReq::kRemoveIdFieldNumber;
const int IMUserRemFriendReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUserRemFriendReq::IMUserRemFriendReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUserRemFriendReq)
}

void IMUserRemFriendReq::InitAsDefaultInstance() {
}

IMUserRemFriendReq::IMUserRemFriendReq(const IMUserRemFriendReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUserRemFriendReq)
}

void IMUserRemFriendReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  remove_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUserRemFriendReq::~IMUserRemFriendReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUserRemFriendReq)
  SharedDtor();
}

void IMUserRemFriendReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUserRemFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUserRemFriendReq& IMUserRemFriendReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMUserRemFriendReq* IMUserRemFriendReq::default_instance_ = NULL;

IMUserRemFriendReq* IMUserRemFriendReq::New() const {
  return new IMUserRemFriendReq;
}

void IMUserRemFriendReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMUserRemFriendReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, remove_id_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUserRemFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUserRemFriendReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_remove_id;
        break;
      }

      // required uint32 remove_id = 2;
      case 2: {
        if (tag == 16) {
         parse_remove_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remove_id_)));
          set_has_remove_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUserRemFriendReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUserRemFriendReq)
  return false;
#undef DO_
}

void IMUserRemFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUserRemFriendReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 remove_id = 2;
  if (has_remove_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remove_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUserRemFriendReq)
}

int IMUserRemFriendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 remove_id = 2;
    if (has_remove_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remove_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUserRemFriendReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUserRemFriendReq*>(&from));
}

void IMUserRemFriendReq::MergeFrom(const IMUserRemFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_remove_id()) {
      set_remove_id(from.remove_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUserRemFriendReq::CopyFrom(const IMUserRemFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUserRemFriendReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMUserRemFriendReq::Swap(IMUserRemFriendReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(remove_id_, other->remove_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUserRemFriendReq::GetTypeName() const {
  return "IM.Buddy.IMUserRemFriendReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUserRemFriendRsp::kUserIdFieldNumber;
const int IMUserRemFriendRsp::kResultCodeFieldNumber;
const int IMUserRemFriendRsp::kRmIdFieldNumber;
const int IMUserRemFriendRsp::kResultStringFieldNumber;
const int IMUserRemFriendRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUserRemFriendRsp::IMUserRemFriendRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUserRemFriendRsp)
}

void IMUserRemFriendRsp::InitAsDefaultInstance() {
}

IMUserRemFriendRsp::IMUserRemFriendRsp(const IMUserRemFriendRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUserRemFriendRsp)
}

void IMUserRemFriendRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  result_code_ = 0u;
  rm_id_ = 0u;
  result_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUserRemFriendRsp::~IMUserRemFriendRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUserRemFriendRsp)
  SharedDtor();
}

void IMUserRemFriendRsp::SharedDtor() {
  if (result_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_string_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUserRemFriendRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUserRemFriendRsp& IMUserRemFriendRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMUserRemFriendRsp* IMUserRemFriendRsp::default_instance_ = NULL;

IMUserRemFriendRsp* IMUserRemFriendRsp::New() const {
  return new IMUserRemFriendRsp;
}

void IMUserRemFriendRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMUserRemFriendRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(user_id_, result_code_);
    rm_id_ = 0u;
    if (has_result_string()) {
      if (result_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_string_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUserRemFriendRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUserRemFriendRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rm_id;
        break;
      }

      // required uint32 rm_id = 3;
      case 3: {
        if (tag == 24) {
         parse_rm_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rm_id_)));
          set_has_rm_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_result_string;
        break;
      }

      // required string result_string = 4;
      case 4: {
        if (tag == 34) {
         parse_result_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_string()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUserRemFriendRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUserRemFriendRsp)
  return false;
#undef DO_
}

void IMUserRemFriendRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUserRemFriendRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // required uint32 rm_id = 3;
  if (has_rm_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rm_id(), output);
  }

  // required string result_string = 4;
  if (has_result_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->result_string(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUserRemFriendRsp)
}

int IMUserRemFriendRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // required uint32 rm_id = 3;
    if (has_rm_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rm_id());
    }

    // required string result_string = 4;
    if (has_result_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result_string());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUserRemFriendRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUserRemFriendRsp*>(&from));
}

void IMUserRemFriendRsp::MergeFrom(const IMUserRemFriendRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_rm_id()) {
      set_rm_id(from.rm_id());
    }
    if (from.has_result_string()) {
      set_result_string(from.result_string());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUserRemFriendRsp::CopyFrom(const IMUserRemFriendRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUserRemFriendRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMUserRemFriendRsp::Swap(IMUserRemFriendRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(rm_id_, other->rm_id_);
    std::swap(result_string_, other->result_string_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUserRemFriendRsp::GetTypeName() const {
  return "IM.Buddy.IMUserRemFriendRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUserInfoChangeReq::kUserIdFieldNumber;
const int IMUserInfoChangeReq::kChangeTypeFieldNumber;
const int IMUserInfoChangeReq::kChangeContentFieldNumber;
const int IMUserInfoChangeReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUserInfoChangeReq::IMUserInfoChangeReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUserInfoChangeReq)
}

void IMUserInfoChangeReq::InitAsDefaultInstance() {
}

IMUserInfoChangeReq::IMUserInfoChangeReq(const IMUserInfoChangeReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUserInfoChangeReq)
}

void IMUserInfoChangeReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  change_type_ = 0u;
  change_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUserInfoChangeReq::~IMUserInfoChangeReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUserInfoChangeReq)
  SharedDtor();
}

void IMUserInfoChangeReq::SharedDtor() {
  if (change_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete change_content_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUserInfoChangeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUserInfoChangeReq& IMUserInfoChangeReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMUserInfoChangeReq* IMUserInfoChangeReq::default_instance_ = NULL;

IMUserInfoChangeReq* IMUserInfoChangeReq::New() const {
  return new IMUserInfoChangeReq;
}

void IMUserInfoChangeReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMUserInfoChangeReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, change_type_);
    if (has_change_content()) {
      if (change_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        change_content_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUserInfoChangeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUserInfoChangeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_change_type;
        break;
      }

      // required uint32 change_type = 2;
      case 2: {
        if (tag == 16) {
         parse_change_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_type_)));
          set_has_change_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_change_content;
        break;
      }

      // required string change_content = 3;
      case 3: {
        if (tag == 26) {
         parse_change_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_change_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUserInfoChangeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUserInfoChangeReq)
  return false;
#undef DO_
}

void IMUserInfoChangeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUserInfoChangeReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 change_type = 2;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->change_type(), output);
  }

  // required string change_content = 3;
  if (has_change_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->change_content(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUserInfoChangeReq)
}

int IMUserInfoChangeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 change_type = 2;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_type());
    }

    // required string change_content = 3;
    if (has_change_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->change_content());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUserInfoChangeReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUserInfoChangeReq*>(&from));
}

void IMUserInfoChangeReq::MergeFrom(const IMUserInfoChangeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_change_content()) {
      set_change_content(from.change_content());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUserInfoChangeReq::CopyFrom(const IMUserInfoChangeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUserInfoChangeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMUserInfoChangeReq::Swap(IMUserInfoChangeReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(change_type_, other->change_type_);
    std::swap(change_content_, other->change_content_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUserInfoChangeReq::GetTypeName() const {
  return "IM.Buddy.IMUserInfoChangeReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUserInfoChangeRsp::kUserIdFieldNumber;
const int IMUserInfoChangeRsp::kResultCodeFieldNumber;
const int IMUserInfoChangeRsp::kResultDesFieldNumber;
const int IMUserInfoChangeRsp::kChangeTypeFieldNumber;
const int IMUserInfoChangeRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUserInfoChangeRsp::IMUserInfoChangeRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUserInfoChangeRsp)
}

void IMUserInfoChangeRsp::InitAsDefaultInstance() {
}

IMUserInfoChangeRsp::IMUserInfoChangeRsp(const IMUserInfoChangeRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUserInfoChangeRsp)
}

void IMUserInfoChangeRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  result_code_ = 0u;
  result_des_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  change_type_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUserInfoChangeRsp::~IMUserInfoChangeRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUserInfoChangeRsp)
  SharedDtor();
}

void IMUserInfoChangeRsp::SharedDtor() {
  if (result_des_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_des_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUserInfoChangeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUserInfoChangeRsp& IMUserInfoChangeRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMUserInfoChangeRsp* IMUserInfoChangeRsp::default_instance_ = NULL;

IMUserInfoChangeRsp* IMUserInfoChangeRsp::New() const {
  return new IMUserInfoChangeRsp;
}

void IMUserInfoChangeRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMUserInfoChangeRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(user_id_, result_code_);
    if (has_result_des()) {
      if (result_des_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_des_->clear();
      }
    }
    change_type_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUserInfoChangeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUserInfoChangeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_result_des;
        break;
      }

      // required string result_des = 3;
      case 3: {
        if (tag == 26) {
         parse_result_des:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_des()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_change_type;
        break;
      }

      // required uint32 change_type = 4;
      case 4: {
        if (tag == 32) {
         parse_change_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_type_)));
          set_has_change_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUserInfoChangeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUserInfoChangeRsp)
  return false;
#undef DO_
}

void IMUserInfoChangeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUserInfoChangeRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // required string result_des = 3;
  if (has_result_des()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->result_des(), output);
  }

  // required uint32 change_type = 4;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->change_type(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUserInfoChangeRsp)
}

int IMUserInfoChangeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // required string result_des = 3;
    if (has_result_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result_des());
    }

    // required uint32 change_type = 4;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_type());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUserInfoChangeRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUserInfoChangeRsp*>(&from));
}

void IMUserInfoChangeRsp::MergeFrom(const IMUserInfoChangeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_result_des()) {
      set_result_des(from.result_des());
    }
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUserInfoChangeRsp::CopyFrom(const IMUserInfoChangeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUserInfoChangeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMUserInfoChangeRsp::Swap(IMUserInfoChangeRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(result_des_, other->result_des_);
    std::swap(change_type_, other->change_type_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUserInfoChangeRsp::GetTypeName() const {
  return "IM.Buddy.IMUserInfoChangeRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUserAddFriendToUserRsp::kUserIdFieldNumber;
const int IMUserAddFriendToUserRsp::kFromIdFieldNumber;
const int IMUserAddFriendToUserRsp::kMsgIdFieldNumber;
const int IMUserAddFriendToUserRsp::kUserInfoFieldNumber;
const int IMUserAddFriendToUserRsp::kMsgTypeFieldNumber;
const int IMUserAddFriendToUserRsp::kStatusFieldNumber;
const int IMUserAddFriendToUserRsp::kCreateTimeFieldNumber;
const int IMUserAddFriendToUserRsp::kContentFieldNumber;
const int IMUserAddFriendToUserRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUserAddFriendToUserRsp::IMUserAddFriendToUserRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUserAddFriendToUserRsp)
}

void IMUserAddFriendToUserRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_info_ = const_cast< ::IM::BaseDefine::UserInfo*>(
      ::IM::BaseDefine::UserInfo::internal_default_instance());
#else
  user_info_ = const_cast< ::IM::BaseDefine::UserInfo*>(&::IM::BaseDefine::UserInfo::default_instance());
#endif
}

IMUserAddFriendToUserRsp::IMUserAddFriendToUserRsp(const IMUserAddFriendToUserRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUserAddFriendToUserRsp)
}

void IMUserAddFriendToUserRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  from_id_ = 0u;
  msg_id_ = 0u;
  user_info_ = NULL;
  msg_type_ = 1;
  status_ = 0;
  create_time_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUserAddFriendToUserRsp::~IMUserAddFriendToUserRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUserAddFriendToUserRsp)
  SharedDtor();
}

void IMUserAddFriendToUserRsp::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_info_;
  }
}

void IMUserAddFriendToUserRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUserAddFriendToUserRsp& IMUserAddFriendToUserRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMUserAddFriendToUserRsp* IMUserAddFriendToUserRsp::default_instance_ = NULL;

IMUserAddFriendToUserRsp* IMUserAddFriendToUserRsp::New() const {
  return new IMUserAddFriendToUserRsp;
}

void IMUserAddFriendToUserRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMUserAddFriendToUserRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(user_id_, from_id_);
    ZR_(status_, create_time_);
    msg_id_ = 0u;
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::IM::BaseDefine::UserInfo::Clear();
    }
    msg_type_ = 1;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  if (has_attach_data()) {
    if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      attach_data_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUserAddFriendToUserRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUserAddFriendToUserRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_from_id;
        break;
      }

      // required uint32 from_id = 2;
      case 2: {
        if (tag == 16) {
         parse_from_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_id_)));
          set_has_from_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_id;
        break;
      }

      // required uint32 msg_id = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_info;
        break;
      }

      // required .IM.BaseDefine.UserInfo user_info = 4;
      case 4: {
        if (tag == 34) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_msg_type;
        break;
      }

      // required .IM.BaseDefine.SessionType msg_type = 5;
      case 5: {
        if (tag == 40) {
         parse_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_msg_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // required .IM.BaseDefine.AddFriendStatus status = 6;
      case 6: {
        if (tag == 48) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::AddFriendStatus_IsValid(value)) {
            set_status(static_cast< ::IM::BaseDefine::AddFriendStatus >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_create_time;
        break;
      }

      // required uint32 create_time = 7;
      case 7: {
        if (tag == 56) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_content;
        break;
      }

      // optional string content = 8;
      case 8: {
        if (tag == 66) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUserAddFriendToUserRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUserAddFriendToUserRsp)
  return false;
#undef DO_
}

void IMUserAddFriendToUserRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUserAddFriendToUserRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 from_id = 2;
  if (has_from_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->from_id(), output);
  }

  // required uint32 msg_id = 3;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msg_id(), output);
  }

  // required .IM.BaseDefine.UserInfo user_info = 4;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->user_info(), output);
  }

  // required .IM.BaseDefine.SessionType msg_type = 5;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->msg_type(), output);
  }

  // required .IM.BaseDefine.AddFriendStatus status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->status(), output);
  }

  // required uint32 create_time = 7;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->create_time(), output);
  }

  // optional string content = 8;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->content(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUserAddFriendToUserRsp)
}

int IMUserAddFriendToUserRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 from_id = 2;
    if (has_from_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_id());
    }

    // required uint32 msg_id = 3;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }

    // required .IM.BaseDefine.UserInfo user_info = 4;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

    // required .IM.BaseDefine.SessionType msg_type = 5;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // required .IM.BaseDefine.AddFriendStatus status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required uint32 create_time = 7;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // optional string content = 8;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUserAddFriendToUserRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUserAddFriendToUserRsp*>(&from));
}

void IMUserAddFriendToUserRsp::MergeFrom(const IMUserAddFriendToUserRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_from_id()) {
      set_from_id(from.from_id());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_user_info()) {
      mutable_user_info()->::IM::BaseDefine::UserInfo::MergeFrom(from.user_info());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUserAddFriendToUserRsp::CopyFrom(const IMUserAddFriendToUserRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUserAddFriendToUserRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_user_info()) {
    if (!this->user_info().IsInitialized()) return false;
  }
  return true;
}

void IMUserAddFriendToUserRsp::Swap(IMUserAddFriendToUserRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(from_id_, other->from_id_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(user_info_, other->user_info_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(status_, other->status_);
    std::swap(create_time_, other->create_time_);
    std::swap(content_, other->content_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUserAddFriendToUserRsp::GetTypeName() const {
  return "IM.Buddy.IMUserAddFriendToUserRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUserAddFriendTargetReq::kUserIdFieldNumber;
const int IMUserAddFriendTargetReq::kFromIdFieldNumber;
const int IMUserAddFriendTargetReq::kMsgIdFieldNumber;
const int IMUserAddFriendTargetReq::kStatusFieldNumber;
const int IMUserAddFriendTargetReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUserAddFriendTargetReq::IMUserAddFriendTargetReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUserAddFriendTargetReq)
}

void IMUserAddFriendTargetReq::InitAsDefaultInstance() {
}

IMUserAddFriendTargetReq::IMUserAddFriendTargetReq(const IMUserAddFriendTargetReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUserAddFriendTargetReq)
}

void IMUserAddFriendTargetReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  from_id_ = 0u;
  msg_id_ = 0u;
  status_ = 0;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUserAddFriendTargetReq::~IMUserAddFriendTargetReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUserAddFriendTargetReq)
  SharedDtor();
}

void IMUserAddFriendTargetReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUserAddFriendTargetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUserAddFriendTargetReq& IMUserAddFriendTargetReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMUserAddFriendTargetReq* IMUserAddFriendTargetReq::default_instance_ = NULL;

IMUserAddFriendTargetReq* IMUserAddFriendTargetReq::New() const {
  return new IMUserAddFriendTargetReq;
}

void IMUserAddFriendTargetReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMUserAddFriendTargetReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(user_id_, status_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUserAddFriendTargetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUserAddFriendTargetReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_from_id;
        break;
      }

      // required uint32 from_id = 2;
      case 2: {
        if (tag == 16) {
         parse_from_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_id_)));
          set_has_from_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_id;
        break;
      }

      // required uint32 msg_id = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required .IM.BaseDefine.AddFriendStatus status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::AddFriendStatus_IsValid(value)) {
            set_status(static_cast< ::IM::BaseDefine::AddFriendStatus >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUserAddFriendTargetReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUserAddFriendTargetReq)
  return false;
#undef DO_
}

void IMUserAddFriendTargetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUserAddFriendTargetReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 from_id = 2;
  if (has_from_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->from_id(), output);
  }

  // required uint32 msg_id = 3;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msg_id(), output);
  }

  // required .IM.BaseDefine.AddFriendStatus status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUserAddFriendTargetReq)
}

int IMUserAddFriendTargetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 from_id = 2;
    if (has_from_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_id());
    }

    // required uint32 msg_id = 3;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }

    // required .IM.BaseDefine.AddFriendStatus status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUserAddFriendTargetReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUserAddFriendTargetReq*>(&from));
}

void IMUserAddFriendTargetReq::MergeFrom(const IMUserAddFriendTargetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_from_id()) {
      set_from_id(from.from_id());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUserAddFriendTargetReq::CopyFrom(const IMUserAddFriendTargetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUserAddFriendTargetReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMUserAddFriendTargetReq::Swap(IMUserAddFriendTargetReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(from_id_, other->from_id_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(status_, other->status_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUserAddFriendTargetReq::GetTypeName() const {
  return "IM.Buddy.IMUserAddFriendTargetReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUserAddFriendTargetRsp::kUserIdFieldNumber;
const int IMUserAddFriendTargetRsp::kFromIdFieldNumber;
const int IMUserAddFriendTargetRsp::kMsgIdFieldNumber;
const int IMUserAddFriendTargetRsp::kStatusFieldNumber;
const int IMUserAddFriendTargetRsp::kResultCodeFieldNumber;
const int IMUserAddFriendTargetRsp::kResultDesFieldNumber;
const int IMUserAddFriendTargetRsp::kUserInfoFieldNumber;
const int IMUserAddFriendTargetRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUserAddFriendTargetRsp::IMUserAddFriendTargetRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUserAddFriendTargetRsp)
}

void IMUserAddFriendTargetRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_info_ = const_cast< ::IM::BaseDefine::UserInfo*>(
      ::IM::BaseDefine::UserInfo::internal_default_instance());
#else
  user_info_ = const_cast< ::IM::BaseDefine::UserInfo*>(&::IM::BaseDefine::UserInfo::default_instance());
#endif
}

IMUserAddFriendTargetRsp::IMUserAddFriendTargetRsp(const IMUserAddFriendTargetRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUserAddFriendTargetRsp)
}

void IMUserAddFriendTargetRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  from_id_ = 0u;
  msg_id_ = 0u;
  status_ = 0;
  result_code_ = 0u;
  result_des_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_info_ = NULL;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUserAddFriendTargetRsp::~IMUserAddFriendTargetRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUserAddFriendTargetRsp)
  SharedDtor();
}

void IMUserAddFriendTargetRsp::SharedDtor() {
  if (result_des_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_des_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_info_;
  }
}

void IMUserAddFriendTargetRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUserAddFriendTargetRsp& IMUserAddFriendTargetRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMUserAddFriendTargetRsp* IMUserAddFriendTargetRsp::default_instance_ = NULL;

IMUserAddFriendTargetRsp* IMUserAddFriendTargetRsp::New() const {
  return new IMUserAddFriendTargetRsp;
}

void IMUserAddFriendTargetRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMUserAddFriendTargetRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(user_id_, status_);
    result_code_ = 0u;
    if (has_result_des()) {
      if (result_des_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_des_->clear();
      }
    }
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::IM::BaseDefine::UserInfo::Clear();
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUserAddFriendTargetRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUserAddFriendTargetRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_from_id;
        break;
      }

      // required uint32 from_id = 2;
      case 2: {
        if (tag == 16) {
         parse_from_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_id_)));
          set_has_from_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_id;
        break;
      }

      // required uint32 msg_id = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required .IM.BaseDefine.AddFriendStatus status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::AddFriendStatus_IsValid(value)) {
            set_status(static_cast< ::IM::BaseDefine::AddFriendStatus >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 5;
      case 5: {
        if (tag == 40) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_result_des;
        break;
      }

      // required string result_des = 6;
      case 6: {
        if (tag == 50) {
         parse_result_des:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_des()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_user_info;
        break;
      }

      // required .IM.BaseDefine.UserInfo user_info = 7;
      case 7: {
        if (tag == 58) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUserAddFriendTargetRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUserAddFriendTargetRsp)
  return false;
#undef DO_
}

void IMUserAddFriendTargetRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUserAddFriendTargetRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 from_id = 2;
  if (has_from_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->from_id(), output);
  }

  // required uint32 msg_id = 3;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msg_id(), output);
  }

  // required .IM.BaseDefine.AddFriendStatus status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // required uint32 result_code = 5;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->result_code(), output);
  }

  // required string result_des = 6;
  if (has_result_des()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->result_des(), output);
  }

  // required .IM.BaseDefine.UserInfo user_info = 7;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->user_info(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUserAddFriendTargetRsp)
}

int IMUserAddFriendTargetRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 from_id = 2;
    if (has_from_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_id());
    }

    // required uint32 msg_id = 3;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }

    // required .IM.BaseDefine.AddFriendStatus status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required uint32 result_code = 5;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // required string result_des = 6;
    if (has_result_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result_des());
    }

    // required .IM.BaseDefine.UserInfo user_info = 7;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUserAddFriendTargetRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUserAddFriendTargetRsp*>(&from));
}

void IMUserAddFriendTargetRsp::MergeFrom(const IMUserAddFriendTargetRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_from_id()) {
      set_from_id(from.from_id());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_result_des()) {
      set_result_des(from.result_des());
    }
    if (from.has_user_info()) {
      mutable_user_info()->::IM::BaseDefine::UserInfo::MergeFrom(from.user_info());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUserAddFriendTargetRsp::CopyFrom(const IMUserAddFriendTargetRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUserAddFriendTargetRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_user_info()) {
    if (!this->user_info().IsInitialized()) return false;
  }
  return true;
}

void IMUserAddFriendTargetRsp::Swap(IMUserAddFriendTargetRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(from_id_, other->from_id_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(status_, other->status_);
    std::swap(result_code_, other->result_code_);
    std::swap(result_des_, other->result_des_);
    std::swap(user_info_, other->user_info_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUserAddFriendTargetRsp::GetTypeName() const {
  return "IM.Buddy.IMUserAddFriendTargetRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUserAddFriendToSelfRsp::kUserIdFieldNumber;
const int IMUserAddFriendToSelfRsp::kFromIdFieldNumber;
const int IMUserAddFriendToSelfRsp::kMsgIdFieldNumber;
const int IMUserAddFriendToSelfRsp::kUserInfoFieldNumber;
const int IMUserAddFriendToSelfRsp::kMsgTypeFieldNumber;
const int IMUserAddFriendToSelfRsp::kCreateTimeFieldNumber;
const int IMUserAddFriendToSelfRsp::kStatusFieldNumber;
const int IMUserAddFriendToSelfRsp::kResultDesFieldNumber;
const int IMUserAddFriendToSelfRsp::kContentFieldNumber;
const int IMUserAddFriendToSelfRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUserAddFriendToSelfRsp::IMUserAddFriendToSelfRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUserAddFriendToSelfRsp)
}

void IMUserAddFriendToSelfRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_info_ = const_cast< ::IM::BaseDefine::UserInfo*>(
      ::IM::BaseDefine::UserInfo::internal_default_instance());
#else
  user_info_ = const_cast< ::IM::BaseDefine::UserInfo*>(&::IM::BaseDefine::UserInfo::default_instance());
#endif
}

IMUserAddFriendToSelfRsp::IMUserAddFriendToSelfRsp(const IMUserAddFriendToSelfRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUserAddFriendToSelfRsp)
}

void IMUserAddFriendToSelfRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  from_id_ = 0u;
  msg_id_ = 0u;
  user_info_ = NULL;
  msg_type_ = 1;
  create_time_ = 0u;
  status_ = 0;
  result_des_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUserAddFriendToSelfRsp::~IMUserAddFriendToSelfRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUserAddFriendToSelfRsp)
  SharedDtor();
}

void IMUserAddFriendToSelfRsp::SharedDtor() {
  if (result_des_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_des_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_info_;
  }
}

void IMUserAddFriendToSelfRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUserAddFriendToSelfRsp& IMUserAddFriendToSelfRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMUserAddFriendToSelfRsp* IMUserAddFriendToSelfRsp::default_instance_ = NULL;

IMUserAddFriendToSelfRsp* IMUserAddFriendToSelfRsp::New() const {
  return new IMUserAddFriendToSelfRsp;
}

void IMUserAddFriendToSelfRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMUserAddFriendToSelfRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(user_id_, from_id_);
    ZR_(create_time_, status_);
    msg_id_ = 0u;
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::IM::BaseDefine::UserInfo::Clear();
    }
    msg_type_ = 1;
    if (has_result_des()) {
      if (result_des_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_des_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUserAddFriendToSelfRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUserAddFriendToSelfRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_from_id;
        break;
      }

      // required uint32 from_id = 2;
      case 2: {
        if (tag == 16) {
         parse_from_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_id_)));
          set_has_from_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_id;
        break;
      }

      // required uint32 msg_id = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_info;
        break;
      }

      // required .IM.BaseDefine.UserInfo user_info = 4;
      case 4: {
        if (tag == 34) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_msg_type;
        break;
      }

      // required .IM.BaseDefine.SessionType msg_type = 5;
      case 5: {
        if (tag == 40) {
         parse_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_msg_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_create_time;
        break;
      }

      // required uint32 create_time = 6;
      case 6: {
        if (tag == 48) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // required .IM.BaseDefine.AddFriendStatus status = 7;
      case 7: {
        if (tag == 56) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::AddFriendStatus_IsValid(value)) {
            set_status(static_cast< ::IM::BaseDefine::AddFriendStatus >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_result_des;
        break;
      }

      // required string result_des = 8;
      case 8: {
        if (tag == 66) {
         parse_result_des:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_des()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_content;
        break;
      }

      // optional string content = 9;
      case 9: {
        if (tag == 74) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUserAddFriendToSelfRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUserAddFriendToSelfRsp)
  return false;
#undef DO_
}

void IMUserAddFriendToSelfRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUserAddFriendToSelfRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 from_id = 2;
  if (has_from_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->from_id(), output);
  }

  // required uint32 msg_id = 3;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msg_id(), output);
  }

  // required .IM.BaseDefine.UserInfo user_info = 4;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->user_info(), output);
  }

  // required .IM.BaseDefine.SessionType msg_type = 5;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->msg_type(), output);
  }

  // required uint32 create_time = 6;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->create_time(), output);
  }

  // required .IM.BaseDefine.AddFriendStatus status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->status(), output);
  }

  // required string result_des = 8;
  if (has_result_des()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->result_des(), output);
  }

  // optional string content = 9;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->content(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUserAddFriendToSelfRsp)
}

int IMUserAddFriendToSelfRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 from_id = 2;
    if (has_from_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_id());
    }

    // required uint32 msg_id = 3;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }

    // required .IM.BaseDefine.UserInfo user_info = 4;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

    // required .IM.BaseDefine.SessionType msg_type = 5;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // required uint32 create_time = 6;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // required .IM.BaseDefine.AddFriendStatus status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required string result_des = 8;
    if (has_result_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result_des());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string content = 9;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUserAddFriendToSelfRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUserAddFriendToSelfRsp*>(&from));
}

void IMUserAddFriendToSelfRsp::MergeFrom(const IMUserAddFriendToSelfRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_from_id()) {
      set_from_id(from.from_id());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_user_info()) {
      mutable_user_info()->::IM::BaseDefine::UserInfo::MergeFrom(from.user_info());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_result_des()) {
      set_result_des(from.result_des());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUserAddFriendToSelfRsp::CopyFrom(const IMUserAddFriendToSelfRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUserAddFriendToSelfRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (has_user_info()) {
    if (!this->user_info().IsInitialized()) return false;
  }
  return true;
}

void IMUserAddFriendToSelfRsp::Swap(IMUserAddFriendToSelfRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(from_id_, other->from_id_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(user_info_, other->user_info_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(create_time_, other->create_time_);
    std::swap(status_, other->status_);
    std::swap(result_des_, other->result_des_);
    std::swap(content_, other->content_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUserAddFriendToSelfRsp::GetTypeName() const {
  return "IM.Buddy.IMUserAddFriendToSelfRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMSendDelMsgToTargetRsp::kUserIdFieldNumber;
const int IMSendDelMsgToTargetRsp::kFromIdFieldNumber;
const int IMSendDelMsgToTargetRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMSendDelMsgToTargetRsp::IMSendDelMsgToTargetRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMSendDelMsgToTargetRsp)
}

void IMSendDelMsgToTargetRsp::InitAsDefaultInstance() {
}

IMSendDelMsgToTargetRsp::IMSendDelMsgToTargetRsp(const IMSendDelMsgToTargetRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMSendDelMsgToTargetRsp)
}

void IMSendDelMsgToTargetRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  from_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMSendDelMsgToTargetRsp::~IMSendDelMsgToTargetRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMSendDelMsgToTargetRsp)
  SharedDtor();
}

void IMSendDelMsgToTargetRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMSendDelMsgToTargetRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMSendDelMsgToTargetRsp& IMSendDelMsgToTargetRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMSendDelMsgToTargetRsp* IMSendDelMsgToTargetRsp::default_instance_ = NULL;

IMSendDelMsgToTargetRsp* IMSendDelMsgToTargetRsp::New() const {
  return new IMSendDelMsgToTargetRsp;
}

void IMSendDelMsgToTargetRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMSendDelMsgToTargetRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, from_id_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMSendDelMsgToTargetRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMSendDelMsgToTargetRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_from_id;
        break;
      }

      // required uint32 from_id = 2;
      case 2: {
        if (tag == 16) {
         parse_from_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_id_)));
          set_has_from_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMSendDelMsgToTargetRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMSendDelMsgToTargetRsp)
  return false;
#undef DO_
}

void IMSendDelMsgToTargetRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMSendDelMsgToTargetRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 from_id = 2;
  if (has_from_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->from_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMSendDelMsgToTargetRsp)
}

int IMSendDelMsgToTargetRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 from_id = 2;
    if (has_from_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMSendDelMsgToTargetRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMSendDelMsgToTargetRsp*>(&from));
}

void IMSendDelMsgToTargetRsp::MergeFrom(const IMSendDelMsgToTargetRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_from_id()) {
      set_from_id(from.from_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMSendDelMsgToTargetRsp::CopyFrom(const IMSendDelMsgToTargetRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMSendDelMsgToTargetRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMSendDelMsgToTargetRsp::Swap(IMSendDelMsgToTargetRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(from_id_, other->from_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMSendDelMsgToTargetRsp::GetTypeName() const {
  return "IM.Buddy.IMSendDelMsgToTargetRsp";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Buddy
}  // namespace IM

// @@protoc_insertion_point(global_scope)
