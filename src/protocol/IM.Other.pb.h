// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Other.proto

#ifndef PROTOBUF_IM_2eOther_2eproto__INCLUDED
#define PROTOBUF_IM_2eOther_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace IM {
namespace Other {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IM_2eOther_2eproto();
void protobuf_AssignDesc_IM_2eOther_2eproto();
void protobuf_ShutdownFile_IM_2eOther_2eproto();

class IMHeartBeat;
class IMSysWelcomeReq;
class IMSysWelcomeRsp;
class IMFeedbackReq;
class IMFeedbackRsp;

// ===================================================================

class IMHeartBeat : public ::google::protobuf::MessageLite {
 public:
  IMHeartBeat();
  virtual ~IMHeartBeat();

  IMHeartBeat(const IMHeartBeat& from);

  inline IMHeartBeat& operator=(const IMHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMHeartBeat& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMHeartBeat* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMHeartBeat* other);

  // implements Message ----------------------------------------------

  IMHeartBeat* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMHeartBeat& from);
  void MergeFrom(const IMHeartBeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IM.Other.IMHeartBeat)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eOther_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eOther_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eOther_2eproto();
  friend void protobuf_ShutdownFile_IM_2eOther_2eproto();

  void InitAsDefaultInstance();
  static IMHeartBeat* default_instance_;
};
// -------------------------------------------------------------------

class IMSysWelcomeReq : public ::google::protobuf::MessageLite {
 public:
  IMSysWelcomeReq();
  virtual ~IMSysWelcomeReq();

  IMSysWelcomeReq(const IMSysWelcomeReq& from);

  inline IMSysWelcomeReq& operator=(const IMSysWelcomeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMSysWelcomeReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMSysWelcomeReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMSysWelcomeReq* other);

  // implements Message ----------------------------------------------

  IMSysWelcomeReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMSysWelcomeReq& from);
  void MergeFrom(const IMSysWelcomeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 ts = 2;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 2;
  inline ::google::protobuf::uint32 ts() const;
  inline void set_ts(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Other.IMSysWelcomeReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_ts();
  inline void clear_has_ts();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 ts_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eOther_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eOther_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eOther_2eproto();
  friend void protobuf_ShutdownFile_IM_2eOther_2eproto();

  void InitAsDefaultInstance();
  static IMSysWelcomeReq* default_instance_;
};
// -------------------------------------------------------------------

class IMSysWelcomeRsp : public ::google::protobuf::MessageLite {
 public:
  IMSysWelcomeRsp();
  virtual ~IMSysWelcomeRsp();

  IMSysWelcomeRsp(const IMSysWelcomeRsp& from);

  inline IMSysWelcomeRsp& operator=(const IMSysWelcomeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMSysWelcomeRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMSysWelcomeRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMSysWelcomeRsp* other);

  // implements Message ----------------------------------------------

  IMSysWelcomeRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMSysWelcomeRsp& from);
  void MergeFrom(const IMSysWelcomeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .IM.BaseDefine.ResultType result_code = 1;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::IM::BaseDefine::ResultType result_code() const;
  inline void set_result_code(::IM::BaseDefine::ResultType value);

  // required string user_nick_name = 2;
  inline bool has_user_nick_name() const;
  inline void clear_user_nick_name();
  static const int kUserNickNameFieldNumber = 2;
  inline const ::std::string& user_nick_name() const;
  inline void set_user_nick_name(const ::std::string& value);
  inline void set_user_nick_name(const char* value);
  inline void set_user_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_user_nick_name();
  inline ::std::string* release_user_nick_name();
  inline void set_allocated_user_nick_name(::std::string* user_nick_name);

  // required uint32 user_id = 3;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required string avatar_url = 4;
  inline bool has_avatar_url() const;
  inline void clear_avatar_url();
  static const int kAvatarUrlFieldNumber = 4;
  inline const ::std::string& avatar_url() const;
  inline void set_avatar_url(const ::std::string& value);
  inline void set_avatar_url(const char* value);
  inline void set_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_avatar_url();
  inline ::std::string* release_avatar_url();
  inline void set_allocated_avatar_url(::std::string* avatar_url);

  // required string msg = 5;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 5;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Other.IMSysWelcomeRsp)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_user_nick_name();
  inline void clear_has_user_nick_name();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_avatar_url();
  inline void clear_has_avatar_url();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_nick_name_;
  int result_code_;
  ::google::protobuf::uint32 user_id_;
  ::std::string* avatar_url_;
  ::std::string* msg_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eOther_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eOther_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eOther_2eproto();
  friend void protobuf_ShutdownFile_IM_2eOther_2eproto();

  void InitAsDefaultInstance();
  static IMSysWelcomeRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMFeedbackReq : public ::google::protobuf::MessageLite {
 public:
  IMFeedbackReq();
  virtual ~IMFeedbackReq();

  IMFeedbackReq(const IMFeedbackReq& from);

  inline IMFeedbackReq& operator=(const IMFeedbackReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMFeedbackReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMFeedbackReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMFeedbackReq* other);

  // implements Message ----------------------------------------------

  IMFeedbackReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMFeedbackReq& from);
  void MergeFrom(const IMFeedbackReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required string nick_name = 2;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // required string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Other.IMFeedbackReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nick_name_;
  ::std::string* content_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eOther_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eOther_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eOther_2eproto();
  friend void protobuf_ShutdownFile_IM_2eOther_2eproto();

  void InitAsDefaultInstance();
  static IMFeedbackReq* default_instance_;
};
// -------------------------------------------------------------------

class IMFeedbackRsp : public ::google::protobuf::MessageLite {
 public:
  IMFeedbackRsp();
  virtual ~IMFeedbackRsp();

  IMFeedbackRsp(const IMFeedbackRsp& from);

  inline IMFeedbackRsp& operator=(const IMFeedbackRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMFeedbackRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMFeedbackRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMFeedbackRsp* other);

  // implements Message ----------------------------------------------

  IMFeedbackRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMFeedbackRsp& from);
  void MergeFrom(const IMFeedbackRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .IM.BaseDefine.ResultType result_code = 1;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::IM::BaseDefine::ResultType result_code() const;
  inline void set_result_code(::IM::BaseDefine::ResultType value);

  // optional string result_string = 2;
  inline bool has_result_string() const;
  inline void clear_result_string();
  static const int kResultStringFieldNumber = 2;
  inline const ::std::string& result_string() const;
  inline void set_result_string(const ::std::string& value);
  inline void set_result_string(const char* value);
  inline void set_result_string(const char* value, size_t size);
  inline ::std::string* mutable_result_string();
  inline ::std::string* release_result_string();
  inline void set_allocated_result_string(::std::string* result_string);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Other.IMFeedbackRsp)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_result_string();
  inline void clear_has_result_string();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* result_string_;
  ::std::string* attach_data_;
  int result_code_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eOther_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eOther_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eOther_2eproto();
  friend void protobuf_ShutdownFile_IM_2eOther_2eproto();

  void InitAsDefaultInstance();
  static IMFeedbackRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// IMHeartBeat

// -------------------------------------------------------------------

// IMSysWelcomeReq

// required uint32 user_id = 1;
inline bool IMSysWelcomeReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMSysWelcomeReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMSysWelcomeReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMSysWelcomeReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMSysWelcomeReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMSysWelcomeReq.user_id)
  return user_id_;
}
inline void IMSysWelcomeReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Other.IMSysWelcomeReq.user_id)
}

// required uint32 ts = 2;
inline bool IMSysWelcomeReq::has_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMSysWelcomeReq::set_has_ts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMSysWelcomeReq::clear_has_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMSysWelcomeReq::clear_ts() {
  ts_ = 0u;
  clear_has_ts();
}
inline ::google::protobuf::uint32 IMSysWelcomeReq::ts() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMSysWelcomeReq.ts)
  return ts_;
}
inline void IMSysWelcomeReq::set_ts(::google::protobuf::uint32 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:IM.Other.IMSysWelcomeReq.ts)
}

// -------------------------------------------------------------------

// IMSysWelcomeRsp

// required .IM.BaseDefine.ResultType result_code = 1;
inline bool IMSysWelcomeRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMSysWelcomeRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMSysWelcomeRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMSysWelcomeRsp::clear_result_code() {
  result_code_ = 0;
  clear_has_result_code();
}
inline ::IM::BaseDefine::ResultType IMSysWelcomeRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMSysWelcomeRsp.result_code)
  return static_cast< ::IM::BaseDefine::ResultType >(result_code_);
}
inline void IMSysWelcomeRsp::set_result_code(::IM::BaseDefine::ResultType value) {
  assert(::IM::BaseDefine::ResultType_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Other.IMSysWelcomeRsp.result_code)
}

// required string user_nick_name = 2;
inline bool IMSysWelcomeRsp::has_user_nick_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMSysWelcomeRsp::set_has_user_nick_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMSysWelcomeRsp::clear_has_user_nick_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMSysWelcomeRsp::clear_user_nick_name() {
  if (user_nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nick_name_->clear();
  }
  clear_has_user_nick_name();
}
inline const ::std::string& IMSysWelcomeRsp::user_nick_name() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMSysWelcomeRsp.user_nick_name)
  return *user_nick_name_;
}
inline void IMSysWelcomeRsp::set_user_nick_name(const ::std::string& value) {
  set_has_user_nick_name();
  if (user_nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nick_name_ = new ::std::string;
  }
  user_nick_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Other.IMSysWelcomeRsp.user_nick_name)
}
inline void IMSysWelcomeRsp::set_user_nick_name(const char* value) {
  set_has_user_nick_name();
  if (user_nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nick_name_ = new ::std::string;
  }
  user_nick_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Other.IMSysWelcomeRsp.user_nick_name)
}
inline void IMSysWelcomeRsp::set_user_nick_name(const char* value, size_t size) {
  set_has_user_nick_name();
  if (user_nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nick_name_ = new ::std::string;
  }
  user_nick_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Other.IMSysWelcomeRsp.user_nick_name)
}
inline ::std::string* IMSysWelcomeRsp::mutable_user_nick_name() {
  set_has_user_nick_name();
  if (user_nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_nick_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Other.IMSysWelcomeRsp.user_nick_name)
  return user_nick_name_;
}
inline ::std::string* IMSysWelcomeRsp::release_user_nick_name() {
  clear_has_user_nick_name();
  if (user_nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_nick_name_;
    user_nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMSysWelcomeRsp::set_allocated_user_nick_name(::std::string* user_nick_name) {
  if (user_nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_nick_name_;
  }
  if (user_nick_name) {
    set_has_user_nick_name();
    user_nick_name_ = user_nick_name;
  } else {
    clear_has_user_nick_name();
    user_nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Other.IMSysWelcomeRsp.user_nick_name)
}

// required uint32 user_id = 3;
inline bool IMSysWelcomeRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMSysWelcomeRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMSysWelcomeRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMSysWelcomeRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMSysWelcomeRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMSysWelcomeRsp.user_id)
  return user_id_;
}
inline void IMSysWelcomeRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Other.IMSysWelcomeRsp.user_id)
}

// required string avatar_url = 4;
inline bool IMSysWelcomeRsp::has_avatar_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMSysWelcomeRsp::set_has_avatar_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMSysWelcomeRsp::clear_has_avatar_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMSysWelcomeRsp::clear_avatar_url() {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_->clear();
  }
  clear_has_avatar_url();
}
inline const ::std::string& IMSysWelcomeRsp::avatar_url() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMSysWelcomeRsp.avatar_url)
  return *avatar_url_;
}
inline void IMSysWelcomeRsp::set_avatar_url(const ::std::string& value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Other.IMSysWelcomeRsp.avatar_url)
}
inline void IMSysWelcomeRsp::set_avatar_url(const char* value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Other.IMSysWelcomeRsp.avatar_url)
}
inline void IMSysWelcomeRsp::set_avatar_url(const char* value, size_t size) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Other.IMSysWelcomeRsp.avatar_url)
}
inline ::std::string* IMSysWelcomeRsp::mutable_avatar_url() {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Other.IMSysWelcomeRsp.avatar_url)
  return avatar_url_;
}
inline ::std::string* IMSysWelcomeRsp::release_avatar_url() {
  clear_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_url_;
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMSysWelcomeRsp::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_url_;
  }
  if (avatar_url) {
    set_has_avatar_url();
    avatar_url_ = avatar_url;
  } else {
    clear_has_avatar_url();
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Other.IMSysWelcomeRsp.avatar_url)
}

// required string msg = 5;
inline bool IMSysWelcomeRsp::has_msg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMSysWelcomeRsp::set_has_msg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMSysWelcomeRsp::clear_has_msg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMSysWelcomeRsp::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& IMSysWelcomeRsp::msg() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMSysWelcomeRsp.msg)
  return *msg_;
}
inline void IMSysWelcomeRsp::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Other.IMSysWelcomeRsp.msg)
}
inline void IMSysWelcomeRsp::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Other.IMSysWelcomeRsp.msg)
}
inline void IMSysWelcomeRsp::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Other.IMSysWelcomeRsp.msg)
}
inline ::std::string* IMSysWelcomeRsp::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Other.IMSysWelcomeRsp.msg)
  return msg_;
}
inline ::std::string* IMSysWelcomeRsp::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMSysWelcomeRsp::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Other.IMSysWelcomeRsp.msg)
}

// optional bytes attach_data = 20;
inline bool IMSysWelcomeRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMSysWelcomeRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMSysWelcomeRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMSysWelcomeRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMSysWelcomeRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMSysWelcomeRsp.attach_data)
  return *attach_data_;
}
inline void IMSysWelcomeRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Other.IMSysWelcomeRsp.attach_data)
}
inline void IMSysWelcomeRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Other.IMSysWelcomeRsp.attach_data)
}
inline void IMSysWelcomeRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Other.IMSysWelcomeRsp.attach_data)
}
inline ::std::string* IMSysWelcomeRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Other.IMSysWelcomeRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMSysWelcomeRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMSysWelcomeRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Other.IMSysWelcomeRsp.attach_data)
}

// -------------------------------------------------------------------

// IMFeedbackReq

// required uint32 user_id = 1;
inline bool IMFeedbackReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMFeedbackReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMFeedbackReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMFeedbackReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMFeedbackReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMFeedbackReq.user_id)
  return user_id_;
}
inline void IMFeedbackReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Other.IMFeedbackReq.user_id)
}

// required string nick_name = 2;
inline bool IMFeedbackReq::has_nick_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMFeedbackReq::set_has_nick_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMFeedbackReq::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMFeedbackReq::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& IMFeedbackReq::nick_name() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMFeedbackReq.nick_name)
  return *nick_name_;
}
inline void IMFeedbackReq::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Other.IMFeedbackReq.nick_name)
}
inline void IMFeedbackReq::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Other.IMFeedbackReq.nick_name)
}
inline void IMFeedbackReq::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Other.IMFeedbackReq.nick_name)
}
inline ::std::string* IMFeedbackReq::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Other.IMFeedbackReq.nick_name)
  return nick_name_;
}
inline ::std::string* IMFeedbackReq::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMFeedbackReq::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Other.IMFeedbackReq.nick_name)
}

// required string content = 3;
inline bool IMFeedbackReq::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMFeedbackReq::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMFeedbackReq::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMFeedbackReq::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& IMFeedbackReq::content() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMFeedbackReq.content)
  return *content_;
}
inline void IMFeedbackReq::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Other.IMFeedbackReq.content)
}
inline void IMFeedbackReq::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Other.IMFeedbackReq.content)
}
inline void IMFeedbackReq::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Other.IMFeedbackReq.content)
}
inline ::std::string* IMFeedbackReq::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Other.IMFeedbackReq.content)
  return content_;
}
inline ::std::string* IMFeedbackReq::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMFeedbackReq::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Other.IMFeedbackReq.content)
}

// optional bytes attach_data = 20;
inline bool IMFeedbackReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMFeedbackReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMFeedbackReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMFeedbackReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMFeedbackReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMFeedbackReq.attach_data)
  return *attach_data_;
}
inline void IMFeedbackReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Other.IMFeedbackReq.attach_data)
}
inline void IMFeedbackReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Other.IMFeedbackReq.attach_data)
}
inline void IMFeedbackReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Other.IMFeedbackReq.attach_data)
}
inline ::std::string* IMFeedbackReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Other.IMFeedbackReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMFeedbackReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMFeedbackReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Other.IMFeedbackReq.attach_data)
}

// -------------------------------------------------------------------

// IMFeedbackRsp

// required .IM.BaseDefine.ResultType result_code = 1;
inline bool IMFeedbackRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMFeedbackRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMFeedbackRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMFeedbackRsp::clear_result_code() {
  result_code_ = 0;
  clear_has_result_code();
}
inline ::IM::BaseDefine::ResultType IMFeedbackRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMFeedbackRsp.result_code)
  return static_cast< ::IM::BaseDefine::ResultType >(result_code_);
}
inline void IMFeedbackRsp::set_result_code(::IM::BaseDefine::ResultType value) {
  assert(::IM::BaseDefine::ResultType_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Other.IMFeedbackRsp.result_code)
}

// optional string result_string = 2;
inline bool IMFeedbackRsp::has_result_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMFeedbackRsp::set_has_result_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMFeedbackRsp::clear_has_result_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMFeedbackRsp::clear_result_string() {
  if (result_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_->clear();
  }
  clear_has_result_string();
}
inline const ::std::string& IMFeedbackRsp::result_string() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMFeedbackRsp.result_string)
  return *result_string_;
}
inline void IMFeedbackRsp::set_result_string(const ::std::string& value) {
  set_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_ = new ::std::string;
  }
  result_string_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Other.IMFeedbackRsp.result_string)
}
inline void IMFeedbackRsp::set_result_string(const char* value) {
  set_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_ = new ::std::string;
  }
  result_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Other.IMFeedbackRsp.result_string)
}
inline void IMFeedbackRsp::set_result_string(const char* value, size_t size) {
  set_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_ = new ::std::string;
  }
  result_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Other.IMFeedbackRsp.result_string)
}
inline ::std::string* IMFeedbackRsp::mutable_result_string() {
  set_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Other.IMFeedbackRsp.result_string)
  return result_string_;
}
inline ::std::string* IMFeedbackRsp::release_result_string() {
  clear_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_string_;
    result_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMFeedbackRsp::set_allocated_result_string(::std::string* result_string) {
  if (result_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_string_;
  }
  if (result_string) {
    set_has_result_string();
    result_string_ = result_string;
  } else {
    clear_has_result_string();
    result_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Other.IMFeedbackRsp.result_string)
}

// optional bytes attach_data = 20;
inline bool IMFeedbackRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMFeedbackRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMFeedbackRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMFeedbackRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMFeedbackRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMFeedbackRsp.attach_data)
  return *attach_data_;
}
inline void IMFeedbackRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Other.IMFeedbackRsp.attach_data)
}
inline void IMFeedbackRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Other.IMFeedbackRsp.attach_data)
}
inline void IMFeedbackRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Other.IMFeedbackRsp.attach_data)
}
inline ::std::string* IMFeedbackRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Other.IMFeedbackRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMFeedbackRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMFeedbackRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Other.IMFeedbackRsp.attach_data)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Other
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IM_2eOther_2eproto__INCLUDED
